//
//  VFIConnect.h
//  VMF
//
//  Created by Randy Palermo on 8/22/11.
//  Copyright 2011 VeriFone, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreLocation/CoreLocation.h>
#import <CoreLocation/CLLocationManagerDelegate.h>
#import "VFIaudioMSR.h"
#import "VFIPayware.h"
#import "VFI_XMLReader.h"
#import "VFIPinpad.h"
#import "VMF_DDASLLogger.h"
#import "VMF_DDAbstractDatabaseLogger.h"
#import "VMF_DDFileLogger.h"
#import "VMF_VMFLog.h"
#import "VMF_DDTTYLogger.h"
#import "swipeData.h"
#import "decryptedCredentials.h"

#define KEYBITS		256
#define AESEncryptionErrorDescriptionKey	@"description"

/** The HostAddress indicates where network communications should be directed. **/
typedef enum {
	HostAddress_Demo,           //!<Demo gateway used for non-posting transactions.
	HostAddress_Production,     //!<Production gateway used for posting transactions.
	HostAddress_Custom  	     //!<Custom gateway used for redirecting to alternate IP address.
} HostAddress;




/** The allowedTransactions structure defines what card types and transaction types are allowed **/
typedef struct _allowedTransactions{
	BOOL		visa;		//!< Visa cards accepted
	BOOL		mc;		//!< MasaterCard cards accepted
	BOOL		amex;		//!< American Express cards accepted
	BOOL		disc;		//!< Discover cards accepted
	BOOL		cbln;		//!< CBLN cards accepted
	BOOL		jal;		//!< JAL cards accepted
	BOOL		jcb;		//!< JCB cards accepted
	BOOL		enrt;		//!< enRoute cards accepted
	BOOL		dccb;		//!< DCCB cards accepted	
	BOOL		swch;		//!< SWCH cards accepted		
	BOOL		unkw;		//!< Unknown cards accepted
	BOOL		all;		//!< Accept All Card Types
	BOOL		add_tip;	//!< Add Tip transactions allowed
	BOOL		completion;	//!< Compltion transactions allowed
	BOOL		credit;		//!< Credit transactions allowed
	BOOL		post_auth;	//!< Post Authorization transactions allowed
	BOOL		pre_auth;	//!< Pre-Authorization transactions allowed
	BOOL		signature;	//!< Signature submission allowed
	BOOL		sale;		//!< Sale transactions allowed
	BOOL		voice_auth;	//!< Voice Authorization transactions allowed
	BOOL		voiding;	//!< Void transactions allowed
} allowedTransactions;


/** The AccMessage structure defines messages passed from VFIConnect to the integrator **/
typedef enum {
	AccMessage_TrackDataReceived,		//!< Track Data Received
	AccMessage_ReaderTimeout,		//!< Reader Timeout
	AccMessage_SledDisconnected,		//!< Sled Reader Disconnected
	AccMessage_SledConnected,		//!< Sled Reader Connected
	AccMessage_PinpadDisconnected,		//!< PIN pad Disconnected
	AccMessage_PinpadConnected,		//!< PIN pad Connected
	AccMessage_AudioMSRDisconnected,		//!< Audio Reader Disconnected
	AccMessage_AudioMSRConnected,		//!< Audio Reader Connected
	AccMessage_AudioMSRProcessing,		//!< Audio Reader Processing Data
	AccMessage_AudioMSRWaitingForSwipe,		//!< Audio Reader - Please Swipe Card
	AccMessage_AudioMSRTimeout,		//!< Audio Reader Timeout
	AccMessage_AudioMSRPoweringUp,		//!< Audio Reader Powering Up
	AccMessage_UnableToReadTrack,		//!< Unable To Read Track Data
	AccMessage_VSPTrackCaptured,		//!< VSP Track Captured
	AccMessage_CardNotAccepted,		//!< Card Not Accepted
	AccMessage_ReaderNotReady,		//!< Reader Not Ready
	AccMessage_TrackCapturedForTransmission,		//!< Track Data Captured - Completing Transaction
	AccMessage_SwipeTransmitTimeout,		//!< Timeout when executing swipe during transmission
	AccMessage_SwipeCancelled,		//!< Cancel Swipe Completed
	AccMessage_KeepAliveDetected,		//!< Audio Reader Keep Alive Detected
	AccMessage_FinishedRecording		//!< Audio Reader Finished Recording

	
} AccMessage;
/** The VFIDevices structure defines the devices to enable during class initialization **/
typedef enum {
	VFIDevices_SecureAudioReader = 1,  //!< VeriFone Secure Audio Reader
	VFIDevices_VX600 = 2,		     //!< VeriFone e210/e255/e315 PinPad
	VFIDevices_Sleeve = 4,		    //!< VeriFone Sled Reader
	VFIDevices_IDT = 8		   //!< uniMag Audio Reader
	
} VFIDevices;

/** Protocol methods established for VFIConnect class **/
@protocol VFIConnectDelegate <NSObject>

@optional
- (void) accessoryDownloadStatus:(NSString*)log; //!<Receives informational messages during process of downloading data to accessory .
//!< @param log Message generated by framework during the download process to either signify status or error at various stages
- (void) accessoryDownloadBlocks:(int)TotalBlocks sent:(int)BlocksSent;//!<Receives transferred data statistics while downloading data to accessory.
//!< @param TotalBlocks Total file size being transferred
//!< @param BlocksSent Amount of data successfully sent

@required
- (void) accessoryDataReceived:(AccMessage)message data:(swipeData*)card;//!<This required delegate protocol monitors all data messages and receives swipe data.
//!< @param message An AccMessage enumeration representing the incoming message from VFIConnect.
//!< @param card An swipeData class representing the card data received after a card swipe.
@end

/**
 * API methods for VFIConnect.
 *
 * Implementing this class will allow access to API calls that will perform network communication, drive hardware and perform transactions.
 */
@interface VFIConnect : NSObject <NSXMLParserDelegate,VFIaudioMSRDelegate,VFIPaywareDelegate,CLLocationManagerDelegate,VFIPinpadDelegate>{
	
	
	id <VFIConnectDelegate> delegate;  //!< Cancel Swipe Completed
	VFIPayware *gen1;
	VFIaudioMSR *uniReader;
	
}

/**
 * Initializes an instance of VFIConnect class with delegate specification
 *
 * Pass a delegate during initialization of the VFIConnect class
 *
 * @param del VFIConnect delegate
 */
-(id) initWithDelegate:(id)del;
/**
 * Initializes an instance of VFIConnect class with delegate specification and debugging options
 *
 * Pass a delegate during initialization of the VFIConnect class. Specify logging and where to log information to. Do not allow logging in publically released versions.
 *
 * @param del VFIConnect delegate
 * @param turnON Passing <c>TRUE</c> will enable logging
 * @param logToDocFolder Create a logging file in the application documents folder
 * @param logToXCodeTTY Log to XCode console
 * @param logToConsoleApp Log to device console
 */
-(id) initWithLogging:(id)del debugLogging:(BOOL)turnON toFile:(BOOL)logToDocFolder toTTY:(BOOL)logToXCodeTTY toConsole:(BOOL)logToConsoleApp;
/**
 * Initializes an instance of VFIConnect class with delegate specification and debugging options
 *
 * Pass a delegate during initialization of the VFIConnect class.  Specify devices to enable.
 *
 * @param del VFIConnect delegate
 * @param deviceFlags Specify VFIDevices to enable.  For example, to use SAR (1) and uniMag (8), you can pass int value 9, or you can specify using enumeration tags separated by bar: (VFIDevices_SecureAudioReader | VFIDevices_IDT)
 */
-(id) initWithDelegate:(id)del devices:(VFIDevices)deviceFlags;
/**
 * Initializes an instance of VFIConnect class with delegate specification and debugging options
 *
 * Pass a delegate during initialization of the VFIConnect class. Specify logging and where to log information to. Do not allow logging in publically released versions. Specify devices to enable.
 *
 * @param del VFIConnect delegate
 * @param turnON Passing <c>TRUE</c> will enable logging
 * @param logToDocFolder Create a logging file in the application documents folder
 * @param logToXCodeTTY Log to XCode console
 * @param logToConsoleApp Log to device console
 * @param deviceFlags Specify VFIDevices to enable.  For example, to use SAR (1) and uniMag (8), you can pass int value 9, or you can specify using enumeration tags separated by bar: (VFIDevices_SecureAudioReader | VFIDevices_IDT)
 */
-(id) initWithLogging:(id)del debugLogging:(BOOL)turnON toFile:(BOOL)logToDocFolder toTTY:(BOOL)logToXCodeTTY toConsole:(BOOL)logToConsoleApp devices:(VFIDevices)deviceFlags;

/**
 * Releases resources used by VFIConnect and turns off location services.
 *
 * This method must be called before the VFIConnect instance is released by integrators code. Performs memory cleanup and properly releases all resources used by VFIConnect.
 *
 */
-(void) close;
/**
 * Determines card issuer
 *
 * Passing an account number to method will return CardType enumeration to specify its type (Visa, MasterCard, etc).
 *
 * @param acct Account number for validation
 */
-(CardType) validateCardType:(NSString*)acct;
/**
 * Returns current SDK Version
 *
 */
-(NSString*) frameworkVersion;

/**
 * Submits a transaction for processing
 *
 * Passing a populated NSDictionary and credentials will initiate a transaction with the gateway. The response is returned by this method as an NSDictionary.
 *
 * @param values NSDictionary containing key/value pairs for VFIConnect to build TRANSACTION data
 * @param credentials String file containing encoded credentials issued from registration
 * @param errorText Any returned error
 */
-(NSDictionary*) submitTransaction:(NSDictionary*)values user:(NSString*)credentials error:(NSString**)errorText;
/**
 * Registers an account at the gateway
 *
 * Passes credentials to be sent to the gateway for account activation. Only Device ID is used to establish device identity. A unique device identifer must be passed in as the Serial Number. Allows a single device to register a single account at gateway. Attempts to register additional accounts would be rejected.
 *
 * @param clientID Client ID
 * @param userID User ID
 * @param password Password
* @param serialNumber <a href=uniqueserialnumberrequirement.html>Serial Number</a>
 * @param addr PAYware Connect Gateway to use (production, demo, or custom)
 * @param customIP Optional. Required only if gateway is set to custom.
 */
-(NSString*) registerAccount:(NSString*)clientID userID:(NSString*)userID password:(NSString*)password serialNumber:(NSString*)serialNumber gateway:(HostAddress)addr customIP:(NSString*)customIP;
/**
 * Registers multiple accounts at the gateway
 *
 * Passes credentials to be sent to the gateway for account activation. Client ID along with Device ID are used to establish device identity. A unique device identifer must be passed in as the Serial Number. Allows a single device to register to multiple accounts at gateway with unique Client ID.
 *
 * @param clientID Client ID
 * @param userID User ID
 * @param password Password
* @param serialNumber <a href=uniqueserialnumberrequirement.html>Serial Number</a>
 * @param addr PAYware Connect Gateway to use (production, demo, or custom)
 * @param customIP Optional. Required only if gateway is set to custom.
 */
-(NSString*) registerAccountMultiUser:(NSString*)clientID userID:(NSString*)userID password:(NSString*)password serialNumber:(NSString*)serialNumber gateway:(HostAddress)addr customIP:(NSString*)customIP;
/**
 * Registers an account at the gateway
 *
 * Passes credentials to be sent to the gateway for account activation. Only Device ID is used to establish device identity.  A unique device identifer must be passed in as the Serial Number. Allows a single device to register a single account at gateway. Attempts to register additional accounts would be rejected.
 *
 * @param clientID Client ID
 * @param userID User ID
 * @param password Password
 * @param serialNumber <a href=uniqueserialnumberrequirement.html>Serial Number</a>
 * @param addr PAYware Connect Gateway to use (production, demo, or custom)
 * @param customIP Optional. Required only if gateway is set to custom.
 * @param type Optional. Allows the integrator to specify and override the framework default value for the device type (DEVTYPE) transmitted to the gateway.
 */
-(NSString*) registerAccount:(NSString*)clientID userID:(NSString*)userID password:(NSString*)password serialNumber:(NSString*)serialNumber gateway:(HostAddress)addr customIP:(NSString*)customIP platform:(NSString*)type;
/**
 * Registers multiple accounts at the gateway
 *
 * Passes credentials to be sent to the gateway for account activation. Client ID along with Device ID are used to establish device identity. A unique device identifer must be passed in as the Serial Number. Allows a single device to register to multiple accounts at gateway with unique Client ID.
 *
 * @param clientID Client ID
 * @param userID User ID
 * @param password Password
 * @param serialNumber <a href=uniqueserialnumberrequirement.html>Serial Number</a>
 * @param addr PAYware Connect Gateway to use (production, demo, or custom)
 * @param customIP Optional. Required only if gateway is set to custom.
 * @param type Optional. Allows the integrator to specify and override the framework default value for the device type (DEVTYPE) transmitted to the gateway.
 */
-(NSString*) registerAccountMultiUser:(NSString*)clientID userID:(NSString*)userID password:(NSString*)password serialNumber:(NSString*)serialNumber gateway:(HostAddress)addr customIP:(NSString*)customIP platform:(NSString*)type;///
/**
 * Submit XML data for processing
 *
 * Passing an XML transaction and credentials will initiate a transaction with the gateway. The response is returned by this method as XML NSString.
 *
 * @param xml Full XML string for PAYware Connect transaction
 * @param credentials String file containing encoded credentials issued from registration
 * @param errorText Returned error, if any
 */
-(NSString*) submitXML:(NSString*)xml user:(NSString*)credentials error:(NSString**)errorText;
/**
 * Converts image data to Base64
 *
 * Base64 Encodes a UIImage for submitting to gateway. In addition to submitting Base64 image data, you must also submit tag \<MIMETYPE\>image/jpg\</MIMETYPE\> to inform PAYware Connect gateway what this data represents.
 *
 * @param image Image to convert
 */
-(NSString*) convertImageBase64Jpeg:(UIImage*)image;///

/**
 * Add entry to log
 *
 * If logging is enabled, this method allows you to manually add entries to that log.
 *
 * @param entry Log entry to append to logging file
 */
-(void) logEntry:(NSString*)entry;
/**
 * Requests settings from gateway
 *
 * Resends credentials to gateway to verify/update settings and configuration.
 *
 * @param credentials Current credentials
 */
-(NSString*) resyncAccount:(NSString*)credentials;///
/**
 * Card Swipe Request.
 * 
 * Initiates a card swipe if compatible hardware is connected.
 */
-(void) requestSwipe;
/**
 * Card Swipe Request.
 *
 * Puts the Secure Audio Reader in an endless swipe detection loop until either swipe data is received or a cancel swipe is performed.  Only valid for Secure Audio Reader
 */
-(void) requestSwipeRepeating;
/**
 * Cancel Swipe Request.
 *
 * Cancels a card swipe if compatible hardware is connected.
 */
-(void) cancelSwipe;

/**
 * Swipe Timeout.
 *
 * Sets the timeout value for a card swipe request.
 *
 * @param sec Seconds
 */
-(void) setTimeout:(int)sec;

/**
 * uniMag Continuous Power.
 *
 * Keeps the uniMag powered on with a continuous powering tone generated by iOS device. Not recommend for production code.
 *
 * @param on <c>TRUE</c> will enable continuous powering tone.
 */
-(void) audioReaderContinuousPower:(BOOL)on;
/**
 * Prompt for Connection.
 *
 * Default behavior is the Audio Reader is automatically detected and an attempt is made to recognize it. Setting this to <c>TRUE</c> will send a message when a device is detected in the headphone jack, but no attempt will be made to recognize it.
 *
 * @param promptOn <c>TRUE</c> will enable prompting for a connection.
 */
-(void) audioReaderPromptForConnection:(BOOL)promptOn;

/**
 * Clears Track Data.
 *
 * Manually purges all track data from memory.  This function is executed automatically after a successful transaction, applicaiton exit, or application sent to background.
 *
 */
-(void)clearTrackData;

/**
 * Clears Properties.
 *
 * Manually purges all track data, xml responses and dictionary responses from memory. This function is only executed when the explicitly called.
 *
 */
-(void) clearProps;

/**
 * Updates e210/e255/e315 from a .zip file
 *
 * Updates the e210/e255/e315 with an properly created archive compressed as a .zip archive.
 *
 * @param zipData The .zip archive containing data to transfer into e210/e255/e315
 *
 * @code
 * NSFileManager *fm;
 * fm = [NSFileManager defaultManager];
 * NSString *documentsDirectory = [[NSBundle mainBundle] resourcePath];
 * NSString* currentFile = [[NSString alloc] initWithFormat:@"%@/%@",documentsDirectory,@"XPI530_OSApps_Gen25.zip"];
 * NSData* dt = [[NSData alloc] initWithContentsOfFile:currentFile];
 * [pinPad updateFromZip:dt];
 * @endcode
 */
-(void) updateVX600:(NSData*)zipData;
/**
 * Updates sled from a NSData
 *
 * Updates the VeriFone sled with NSData file.
 *
 * @param type The type of update to perform
 @code
 typedef enum {
    VFUpdateTypeVSP,
    VFUpdateTypeBootloader,
    VFUpdateTypeFirmware,
 } VFUpdateType;
 @endcode
 * @param data The binary file to transfer into the VeriFone Sled
 *
 */
- (void) updatePayware:(VFUpdateType)type fileData:(NSData*)data;

/**
 * Decrypts credentials
 *
 * Extracts data for the credentials file, populates and returns a decryptedCredentials class instance.
 *
 * @param credentials Credentials to decrypt
 *
 */
-(decryptedCredentials*) decryptCredentials:(NSString*)credentials;
/**
 * Determines allowed transactions
 *
 * Extracts aloowed transactions encoded within the credentials file, populates and returns a allowedTransactions class instance.
 *
 * @param credentials Credentials to extract allowed transactions from
 *
 */
-(allowedTransactions) getAllowedTransactions:(NSString*)credentials;
/**
 * Get Device Key
 *
 * Returns a masked DeviceKey embedded in the provided configuration file.
 *
 * @param credentials Credentials to extract DeviceKey from
 *
 */
-(NSString*) getDeviceKey:(NSString*)credentials;
/**
 * Get Client ID
 *
 * Returns the Client ID embedded in the provided configuration file.
 *
 * @param credentials Credentials to extract ClientID from
 *
 */
-(NSString*) getClientID:(NSString*)credentials;
/**
 * Get Serial Number
 *
 * Returns the serial number embedded in the provided configuration file.
 *
 * @param credentials Credentials to extract SerialNumber from
 *
 */
-(NSString*) getSerialNumber:(NSString*)credentials;
/**
 * Get Custom ID
 *
 * Returns the Custom IP embedded in the provided configuration file.
 *
 * @param credentials Credentials to extract CustomIP from
 *
 */
-(NSString*) getCustomIP:(NSString*)credentials;
/**
 * Get Host Address
 *
 * Returns the Host Address embedded in the provided configuration file.
 *
 * @param credentials Credentials to extract HostAddress from
 *
 */
-(HostAddress) getHostAddress:(NSString*)credentials;
/**
 * Enable logging
 *
 * Specify logging and where to log information to. Do not allow logging in publically released versions.
 *
 * @param turnON Passing <c>TRUE</c> will enable logging
 * @param logToDocFolder Create a logging file in the application documents folder
 * @param logToXCodeTTY Log to XCode console
 * @param logToConsoleApp Log to device console
 */
-(void) debugLogging:(BOOL)turnON toFile:(BOOL)logToDocFolder toTTY:(BOOL)logToXCodeTTY toConsole:(BOOL)logToConsoleApp;

@property (readonly) NSString* xmlResponse; //!< An NSString containing the last full XML response from the gateway.
@property (readonly) NSDictionary* dictResponse; //!< An NSDictionary containing the last full XML response from the gateway parsed into a dictionary.
@property (retain) id delegate;  //!< This is the receiver’s delegate or nil if it does not have a delegate.
@property (readonly) BOOL hasTrackData; //!< Returns if track data is being retained by the framework. Use this method to determine if you can submit a transaction without any keyed data (just amount).
@property (readonly) BOOL gen1Connected;//!< Return connection status of VeriFone Sled Reader
@property (readonly) BOOL gen2Connected;//!< Return connection status of VeriFone e210/e255/e315 Pinpad Device
@property (nonatomic, retain) VFIPayware *gen1; //!<Access to the VFIPAYware class for controlling the sled MSR hardware.
@property (nonatomic, retain) VFIPinpad *pinpad; //!< Access to the VFIPinpad class for controlling the e210/e255/e315 hardware
@property (nonatomic, retain) VFIaudioMSR *uniReader; //!< Access to the VFIaudioMSR class for controlling the audio MSR hardware.
@property (nonatomic, retain) VFIConnect *_vfiConnect; //!< Singleton instance of VFIConnect. For internal use only.

@property (readonly) int vfAudioJackMSRBatteryLevel; //!< Returns battery voltage in millivolts (e.g., 3128 = 3.128 Volts). For VeriFone SAR Only.
@property (readonly) NSString* vfAudioJackMSRFirmware; //! Returns a two character string representing current firmware version (e.g., 08 = 0.8). For VeriFone SAR Only
@property (readonly) NSString* encryptedTrackData;  //!< Returns encrypted track 2 data captured from VeriFone SAR
@property (readonly) NSString* track1Data;  //!< Returns encrypted track 1 data captured from uniMag
@property (readonly) NSString* activationTrack; //!< Returns VSP Activation track info (for Sled or e210/e255/e315 only)

@property (readonly) NSString* SDKVersion; //!< Returns current SDK version



@end
