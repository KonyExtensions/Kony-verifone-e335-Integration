

#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import	<ExternalAccessory/ExternalAccessory.h>
#import "VFICardData.h"
#import "VFIEMAFiles.h"
#import "VFIBINRange.h"
#import "VFIDataEntry.h"
#import "VFICipheredData.h"
#import "VFIZontalk.h"
#import "VFIDiagnostics.h"
#import "VFIEMVAuthorization.h"
#import "VFIEMVCompletionData.h"
#import "VFIEMVConfiguration.h"
#import "VFIEMVResponse.h"
#import "VFIEncryptionData.h"
#import "VFIFinancialData.h"
#import "VFIEMVTags.h"
#import "VFIZipArchive.h"
#import "VFIControl.h"
#import "VFIBarcode.h"
#import "AsyncSocket.h"

#import "NSData-AES.h"
#import "Base64.h"

#include "VFI_unzip.h"





/** Protocol methods established for VFIPinpad class NEW **/
@protocol VFIPinpadDelegate <NSObject>

@optional
- (void) pinpadResultCode:(NSString*)command result:(int)code;//!< Result code received. Receives int value representing the returned result code after executing a  API call represented by <c>command</c>.
//!< @param code Result code
//!< @param command XPI command executed

- (void) pinpadLogEntry:(NSString*)logEntry withSeverity:(int)severity;//!<When VFIPinpad::logEnabled:() is passed <c>TRUE</c>, this delegate will receive log entries.
//!< @param logEntry The log entry
//!< @param severity The severitry of the log entry, with 0 indicating highest priority. Uses enumeration #SEVERITY_LOG_LEVELS

- (void) pinpadSerialData:(NSData*)data  incoming:(BOOL)isIncoming; //!<All incoming/outgoing data going to the XPI application can be monitored through this delegate.
//!< @param data The serial data represented as a NSData object
//!< @param isIncoming The direction of the data
//!<- <c>TRUE</c> specifies data being received from XPI application,
//!<- <c>FALSE</c> indicates data being sent to XPI application.

- (void) btSerialData:(NSData*)data  incoming:(BOOL)isIncoming; //!<All incoming/outgoing data going to the bluetooth interface can be monitored through this delegate. This data will be process and further reported to individual serialData delegates
//!< @param data The serial data represented as a NSData object
//!< @param isIncoming The direction of the data
//!<- <c>TRUE</c> specifies data being received from Bluetooth interface,
//!<- <c>FALSE</c> indicates data being sent to bluetooth interface.


- (void) pinpadServerData:(NSData*)data  incoming:(BOOL)isIncoming; //!<All incoming/outgoing data going to the TCP server from a remote socket can be monitored through this delegate.
//!< @param data The serial data represented as a NSData object
//!< @param isIncoming The direction of the data
//!<- <c>TRUE</c> specifies data being received by the TCP server for sending to XPI,
//!<- <c>FALSE</c> indicates data being sent to remote socket.

- (void) pinpadMSRData:(NSString*)pan  expMonth:(NSString*)month  expYear:(NSString*)year  trackData:(NSString*)track2; //!<Receives card data from MSR swipe activated by VFIPinpad::enableMSR .
//!< @param pan Account Number (masked or encoded for security)
//!< @param month Card Expiration Month
//!< @param year Card Expiration Year
//!< @param track2 Complete track 2 data (encoded for security)

- (void) pinpadMSRData:(NSString*)pan  expMonth:(NSString*)month  expYear:(NSString*)year  track1Data:(NSString*)track1  track2Data:(NSString*)track2;//!<Receives card data from MSR swipe activated by VFIPinpad::enableMSRDualTrack .
//!< @param pan Account Number (masked or encoded for security)
//!< @param month Card Expiration Month
//!< @param year Card Expiration Year
//!< @param track1 Complete track 1 data (encoded for security)
//!< @param track2 Complete track 2 data (encoded for security)

- (void) pinpadDownloadInfo:(NSString*)log;//!<Receives informational messages during process of downloading data to e210/e255/e315 .
//!< @param log Message generated by framework during the download process to either signify status or error at various stages

- (void) pinpadDownloadBlocks:(int)TotalBlocks sent:(int)BlocksSent;//!<Receives transferred data statistics while downloading data to e210/e255/e315.
//!< @param TotalBlocks Total file size being transferred
//!< @param BlocksSent Amount of data successfully sent

- (void) pinPadInitialized:(BOOL)isInitialized;//!<Notifies of initialization state changes in e210/e255/e315 XPI Application
//!< @param isInitialized Device initialization state change
//!<- <c>TRUE</c> successfully initialized the XPI application,
//!<- <c>FALSE</c> XPI application went offline.

- (void) pinpadReconnectStarted;//!<When the External Accessory reports the e210/e255/e315 is detected (but not initialized by framework),this delegate is called. This signifies the beginning of the framework initialization process of the XPI application.

- (void) pinpadReconnectFinished;//!<This signifies the end of the framework initialization process for XPI application.

- (void) pinpadConnected:(BOOL)isConnected;//!<Notified of XPI connection/disconnection events.  A connect/disconnect can either be from a physical disconnection/connection with the External Accessory API, or from an application going to backround or returning to foreground.
//!< @param isConnected A new connection or disconnection was detected
//!<- <c>TRUE</c> The XPI application has connected.
//!<- <c>FALSE</c> The XPI application has disconnected.

- (void) serverConnected:(BOOL)isConnected;//!<Notified of TCP Server connection/disconnection events.  A connect/disconnect can either be from a physical disconnection/connection with the External Accessory API, or from an application going to backround or returning to foreground.
//!< @param isConnected A new connection or disconnection was detected
//!<- <c>TRUE</c> The TCP Server has connected.
//!<- <c>FALSE</c> The TCP Server has disconnected.

- (void) pinpadDataReceived:(NSData*)data;//!<This delegate monitors all data received from XPI Application.
//!< @param data A NSData binary object representing the incoming data from XPI.

- (void) pinpadDataSent:(NSData*)data;//!<This delegate monitors all data sent from XPI Application.
//!< @param data A NSData binary object representing the outgoing data sent to XPI.

- (void) pinpadMessage:(NSString*)message;
@end

/** VMF Generated Error Code Responses **/
typedef enum {
    VFIResultCode_Framework_Timeout = -1, //!<Command never received reply to command sent. XPI is unresponsive.
	VFIResultCode_ACK_Timeout = -2, //!<Command never received `<ACK>` of command sent. XPI is unresponsive.
	VFIResultCode_Framework_Invalid_Data = -3, //!<Data passed to method is out of bounds or invalid
	VFIResultCode_Framework_No_Blocking = -4, //!<value returned on when non-blocking is enabled
	VFIResultCode_Device_Not_Available = -5 //!<value returned when command was sent when device was offline
	
} VFIErrorCode;

/** XPI Encryption Modes **/
typedef enum{
	EncryptionMode_VSP=1,
	EncryptionMode_PKI=2,
	EncryptionMode_NOE=0,
	EncryptionMode_VSD=5
	
} EncryptionMode;

/** Logging Severity Levels **/
enum SEVERITY_LOG_LEVELS {
    SEV_DEBUG=0,
    SEV_INFO_PINPAD=1,
    SEV_WARN=2,
    SEV_ERROR=3,
    SEV_FATAL=4,
    SEV_UNKOWN=5
};


/**
 * API methods for e210/e255/e315 for XPI.
 *
 * Implementing this class will allow access to API calls that will perform e210/e255/e315 XPI commands.
 */
@interface VFIPinpad : NSObject < EAAccessoryDelegate, NSStreamDelegate,VFIZontalkDelegate, UIApplicationDelegate> {
	
	id <VFIPinpadDelegate> delegate;

	

}

/**
 * Creates an instance of VFIPinpad class.
 *
 * @retval <id> of VFIPinpad class
 *
 * Example Usage:
 * @code
 *    VFIPinpad* pinpad = [[VFIPinpad alloc] init];
 * @endcode
 */
-(id)init;

/**
 * Controls the amount of looping attempts to contact XPI application.
 *
 * @param loop The number of loops in establishing contact to e210/e255/e315 while waiting for initialization
 *
 * If the e210/e255/e315 is unresponsive, the framework will loop the specified number of times, with a delay of restartLoopDelay:() between each attempt. The default is 59 loops.
 */
-(void) setInitLoop:(int) loop;

/**
 * Initializes the XPI application server.
 *
 * This is executed after the instance is created with init and the device is initialized. If any of the optional protocols will be used, setDelegate should first be executed.
 *
  * @param port Port to listen on
 *
 * Example Usage:
 * @code
 *    VFIPinpad* pinpad = [[VFIPinpad alloc] init];
 *    [pinpad setDelegate:self];
*    [pinpad initDevice];
 *    [pinpad initServerOnPort:8080];
 * @endcode
 */
-(void) initServerOnPort:(int)port;

/**
 * Initializes the XPI application.
 *
 * This is executed after the instance is created with init. If any of the optional protocols will be used, setDelegate should first be executed.
 *
 * Example Usage:
 * @code
 *    VFIPinpad* pinpad = [[VFIPinpad alloc] init];
 *    [pinpad setDelegate:self];
 *    [pinpad initDevice];
 * @endcode
 */
-(void) initDevice;
/*
 * Initializes the XPI application via a remote socket connection.
 *
 * This is executed after the instance is created with init. If any of the optional protocols will be used, setDelegate should first be executed.
 *
 *
 * @param address Server Address of remote iOS device connected to device
 * @param port Port remote iOS device is listening on
 *
 * Example Usage:
 * @code
 *    VFIPinpad* pinpad = [[VFIPinpad alloc] init];
 *    [pinpad setDelegate:self];
 *    [pinpad initDeviceOnServer:@"192.168.0.1" port:8080];
 * @endcode
 */
-(void) initDeviceOnServer:(NSString*)address port:(int)port;

/**
 * Terminates stream connection to XPI application
 *
 * This method will shut down the connection to the XPI stream. An initDevice() will need to be executed again to engage a new stream connection.
 */
-(void) closeDevice;

/**
 * Controls the restart loop delay
 *
 * @param sec The amount of time in fractional sections to wait between attempts in establishing contact to e210/e255/e315 while waiting for initialization
 *
 * Default is 1.0 seconds.
 */
-(void) restartLoopDelay:(float)sec;

/**
 * Renables default blocking on all API methods
 *
 * By default blocking is on. Most API calls will wait for a response from XPI before returning control to integrator.  This behavior can be turned off by calling disableBlocking()
 */
-(void) enableBlocking;

/**
 * Disables default blocking on all API methods
 *
 * By default blocking is on. Most API calls will wait for a response from XPI before returning control to integrator.  This behavior can be turned off by calling this method.  Default blocking can be turned back on by calling enableBlocking()
 */
-(void) disableBlocking;

/**
 * Forces Key Serial Number to 20 characters
 *
 * Determines of KSN should always return 20 characters, or just value provided by e210/e255/e315
 * @param is20Char Valid values:
 * - <c>TRUE</c> Left pad KSN with 0xFF to return value taht is 20 characters
 * - <c>FALSE</c> Return KSN unmodified - do not left pad (default behavior).
 */
-(void) setKSN20Char:(BOOL)is20Char;

/**
 * Updates e210/e255/e315 from file specified by URL
 *
 * Updates the e210/e255/e315 with an properly created archive located on a network share, either intranet or internet.
 * @param theURL Network location specifying the valid .zip archive for upload into e210/e255/e315
 */
-(void) updateFromUrl:(NSString*)theURL;

/**
 * Updates e210/e255/e315 from a .zip file
 *
 * Updates the e210/e255/e315 with an properly created archive compressed as a .zip archive.
 *
 * @param data The .zip archive containing data to transfer into e210/e255/e315
 *
 * @code
  * NSFileManager *fm;
  * fm = [NSFileManager defaultManager];
  * NSString *documentsDirectory = [[NSBundle mainBundle] resourcePath];
  * NSString* currentFile = [[NSString alloc] initWithFormat:@"%@/%@",documentsDirectory,@"XPI530_OSApps_Gen25.zip"];
  * NSData* dt = [[NSData alloc] initWithContentsOfFile:currentFile];
  * [pinPad updateFromZip:dt];
 * @endcode
 */
-(void) updateFromZip:(NSData*)data;

/**
 * Send a string command to XPI application
 *
 * Sends a command represented by the provide string object to the XPI application through the accessory protocol.
 *
 * @param cmd NSString representation of command to execute
 * @param lrc If <c>TRUE</c>, this will wrap command with start/end/lrc:  `<STX>cmd<ETX><LRC>`
 */
-(int) sendStringCommand:(NSString*)cmd calcLRC:(BOOL)lrc;

/**
 * Send a NSData object to XPI application
 *
 * Sends a command represented by the provide NSData object to the XPI application through the accessory protocol.
 *
 * @param cmd NSData representation of command to execute
 * @param lrc If <c>TRUE</c>, this will wrap command with start/end/lrc:  `<STX>cmd<ETX><LRC>`
 */
-(int) sendDataCommand:(NSMutableData*)cmd calcLRC:(BOOL)lrc;

/**
 * Time to wait for `<ACK>` in response to API calls sent to e210/e255/e315
 *
 * All commands sent to e210/e255/e315 should return `<ACK>`, followed by data specific for that command (if any).  The default time waiting for e210/e255/e315 to `<ACK>` is 2 seconds.  If no `<ACK>` is received within the allotted time frame, VMF will attemp to resend the command up to 3 times before error condition generated.
 *
 * @param seconds Amount of time to wait for `<ACK>` after sending command 
 */
-(void) setACKTimeout:(int)seconds;

/**
 * Clears VMF buffer of any pending command not yet sent to e210/e255/e315 then executes cancelCommand()
 *
 */
-(void) cancelPendingCommand;

/**
 * Cancel Command With Display Options
 *
 * This command will cancel any PIN pad command that is pending User Action such as:
 * - Card insertion or card swipe
 * - Data Entry or Function Key
 * - Signature Capture Request
 *
 * @param display int value to specify what the screen should display after this command
 * - 0: No Screen Change
 * - 1: Display Welcome Message
 * - 2: Clear The Screen
 *
 * It is recommended that the host device send an S01 command after the S00 command if the WELCOME/BONJOUR message is to appear.
 * S00 Command cancels both US and Canadian commands.
 * S00 will not display TRANSACTION CANCELED if sent during C30 or S20 commands.
 *
 * XPI reference: S00
 */
-(void) cancelCommandWithDisplayOptions:(int)display;

/**
 * Cancel Command With Display Options and EMV Fallback and Change Keyboard Status
 *
 * This command will cancel any PIN pad command that is pending User Action such as:
 * - Card insertion or card swipe
 * - Data Entry or Function Key
 * - Signature Capture Request
 *
 * @param display int value to specify what the screen should display after this command
 * - 0: No Screen Change
 * - 1: Display Welcome Message
 * - 2: Clear The Screen
 *
 * @param fallbackFlag int value to specify the EMV Fallback Setting
 * - 0: Set Fallback Flag Off
 * - 1: Set Fallback Flag On
 *    Any other value - not sent
 *
 * @param shouldDisableKeyboard BOOL value to specify the keyboard behavior after the command is processed
 * - false: Keyboard remains unchanged with the current status (default)
 * - true: Disable Keyboard
 *
 * It is recommended that the host device send an S01 command after the S00 command if the WELCOME/BONJOUR message is to appear.
 * S00 Command cancels both US and Canadian commands.
 * S00 will not display TRANSACTION CANCELED if sent during C30 or S20 commands.
 *
 * XPI reference: S00
 */
-(void) cancelCommandWithDisplayOptions:(int)display andEMVFallback:(int)fallbackFlag disableKeyboard:(BOOL)shouldDisableKeyBoard;

/**
 * Reports current framework version
 *
 */
-(NSString* )frameworkVersion;

/**
 * Time to wait for response from API calls sent to e210/e255/e315
 *
 * All commands sent to e210/e255/e315 should return `<ACK>`, followed by data specific for that command (if any).  The default framework timeout waiting for data is 5 seconds.  If no data is received, a framework timeout error will be returned from enumeration #VFIErrorCode
 *
 * @param seconds Amount of time to wait for response before timeout error
 */
-(void) setFrameworkTimeout:(int)seconds;

/**
 * Time to wait for response to prompt
 *
 * When commands are executing requiring pinpad input before proceeding, a timeout error will be returned from enumeration #VFIErrorCode if wait time exceeds prompt timeout value.  Default value is 30 seconds.
 *
 * @param seconds Amount of time to wait for pinpad keypress in response to prompt before timeout
 */
-(void) setPromptTimeout:(int)seconds;

/**
 * Time to wait for response to PIN entry
 *
 * When commands are executing requiring PIN code entry, a timeout error will be returned from enumeration #VFIErrorCode if wait time exceeds PIN timeout value.  Default value is 45 seconds.
 *
 * @param seconds Amount of time to wait for PIN entry in response to PIN request before timeout
 */
-(void) setPINTimeout:(int)seconds;

/**
 * Time to wait for response to account number request
 *
 * When manual PAN entry is requested, a timeout error will be returned from enumeration #VFIErrorCode if wait time exceeds Account Entry timeout value.  Default value is 45 seconds.
 *
 * @param seconds Amount of time to wait for account entry entry in response to manual PAN entry request before timeout
 */
-(void) setAccountEntryTimeout:(int)seconds;

/**
 * Time to wait for response during EMV transaction
 *
 * When cardAuthorization() method is executed during an EMV transaciton flow, a timeout error will be returned from enumeration #VFIErrorCode if wait time exceeds Continue Transaction timeout value.  Default value is 45 seconds.
 *
 * @param seconds Amount of time to wait for account entry entry in response to manual PAN entry request before timeout
 */
-(void) setContinueTransactionTimeout:(int)seconds;

/**
 * Toggles API method calls blocking for next command
 *
 * By default, calls are blocked while they wait for e210/e255/e315 to provide a response.  Calling this method will turn off blocking on the next API call. The current value for this flag can be polled by evaluating read-only property willWaitForResponse.
 *
 * @param wait Amount of time to wait for account entry entry in response to manual PAN entry request before timeout
 * - <c>TRUE</c> Wait for response (default behavior)
 * - <c>FALSE</c> Do NOT wait for response on text command.
 */
-(void) waitForResponse:(BOOL)wait;

/**
 * Clears all data structures in VFIPinpad class
 *
 */
-(void) clearAllData;

/**
 * Enabled logging to delegate.
 *
 * @param enable Setting \a TRUE enables logging to VFIPinpadDelegate::pinpadLogEntry:withSeverity:()
 */
-(void) logEnabled:(BOOL)enable;

/**
 * Enabled logging to XCode Console.
 *
 * @param enable Setting \a TRUE enables additional logging to debug b_console window in iOS
 */
-(void) consoleEnabled:(BOOL)enable;

/**
 * Sends a list of parameters to the e210/e255/e315
 *
 * This will update the config.sys with supplied parameters.  The parameters are provided as a NSMutableArray with each line being a separate parameter. A device reboot will be required to complete process.
 *
 * @param parameters A NSMutableArray containg objects of type NSString
 *
 * @code
 * NSMutableArray* arr = [[NSMutableArray alloc] initWithCapacity:0];
 * [arr addObject:@"*APPOVERRIDE=0"];
 * [arr addObject:@"*STAYCONNECTED=1"];
 * [arr addObject:@"*KEEPALIVE=1"];
 * [arr addObject:@"*POWERSHARE=0"];
 * [arr addObject:@"*CHARGEHOST=50"];
 * [arr addObject:@"*XCDEBUG="];
 * [pinPad setParameterArray: arr];
 * @endcode
 */
-(void)setParameterArray:(NSMutableArray*)parameters;

/**
 * Sends a single parameters to the e210/e255/e315
 *
 * This will update the config.sys with a single parameter. A device reboot will be required to complete process.
 *
 * @param parmName The parameter name
 * @param parmValue The parameter value
 *
 * @code
 * [pinPad setParameter:@"*APPOVERRIDE" value:@"0"];
 * @endcode
 */
-(void)setParameter:(NSString*)parmName value:(NSString*)parmValue;

/**
 * Set PIN Bypass Support
 *
 * @see pinBypass:()
 */
-(int) D01:(BOOL)bypass;
/**
 * Set PIN Bypass Support
 *
This command will enable/disable the PIN bypass for EMV Offline PIN. If enabled, PIN entry can be bypassed using ENTER key. Not all hosts or regions support this feature. The default for this feature is that PIN ByPass is disabled.
 *
 @param bypass TRUE = Enable PIN Entry Bypass, FALSE = Disable PIN Entry bypass
 * @retval Result Code:
 * - 00: Successful - retrieve results in NSArray #emaFiles, containing VFIEMAFiles
 * - 01: Unsuccessful.

 */
-(int) pinBypass:(BOOL)bypass;

/**
 * Request EMA Files
 *
 * @see requestEMAFiles()
 */
-(int) S97;
/**
 * Request EMA Files
 *
 This command requests the PIN pad to return all the .EMA files installed on the PIN pad device.
 Note: If XPI is not installed on GID 1, it can only return the EMA files installed in GID where XPI resides.
 *
 * @retval Result Code:
 * - 00: Successful - retrieve results in NSArray #emaFiles, containing VFIEMAFiles
 * - 02: Unsuccessful. Error Occurred
 
 * @code
 int response = [[Vx600 pinPad] requestEMAFiles];
 if (response == 0) {
   NSArray *ar = [[Vx600 pinPad] emaFiles];
     for (int x = 0; x < [ar count]; x++) {
       VFIEMAFiles *f = [ar objectAtIndex:x];
        NSLog(@"Rec#%i, GID = %i", x,f.GID);
        NSLog(@"Rec#%i, FileName = %@", x,f.FileName);
        NSLog(@"Rec#%i, Logical = %@", x,f.Logical);
        NSLog(@"Rec#%i, NAME = %@", x,f.NAME);
        NSLog(@"Rec#%i, VERSION = %@", x,f.VERSION);
        NSLog(@"Rec#%i, ALLOW_MESSAGES = %@", x,f.ALLOW_MESSAGES);
        NSLog(@"Rec#%i, DOWNLOAD_ON_TIMEOUT = %@", x,f.DOWNLOAD_ON_TIMEOUT);
     }
 }
 * @endcode
 */
-(int) requestEMAFiles;

/**
 * Polls e210/e255/e315 for Diagnostic Info
 *
 * @see diagnosticInfoExtended()
 */
-(int) S95Extended;
/**
 * Polls e210/e255/e315 for Diagnostic Info
 *
 * This will request diagnostic info from the e210/e255/e315. Includes polling for extended data SVC_INFO_SERLNO and SVC_INFO_PARTNO. The returned data will be populated in the VFIDiagnostics object #vfiDiagnostics. XPI reference: S95.
 *
 * @retval Result Code:
 * - 00: Successful
 * - 01: Unsuccessful
 */
-(int) diagnosticInfoExtended;

/**
 * Polls e210/e255/e315 for Diagnostic Info
 *
 * @see diagnosticInfo()
 */
-(int) S95;
/**
 * Polls e210/e255/e315 for Diagnostic Info
 *
 * This will request diagnostic info from the e210/e255/e315. The returned data will be populated in the VFIDiagnostics object #vfiDiagnostics. XPI reference: S95.
 *
 * @retval Result Code:
 * - 00: Successful
 * - 01: Unsuccessful
 */
-(int) diagnosticInfo;

/**
 * Clear all CAPK Files
 *
 * This command will scan through the EST and delete all the current CAPK files. XPI reference: D12.
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in Table Record (Future Use) 
 * - 09: Table Filename Duplication (Future Use)
 */
-(int) clearCAPK;

/**
 * Clear all CAPK Files
 *
 * @see clearCAPK()
 */
-(int) D12;

/**
 * Filename of newly created CAPK from createCAPK()
 *
 * CAPK File name format is the first and last letter of the RID plus the Index number. The extension is EMV.
 *
 * @retval NSString of CAPK Created, if successful
 *
 * @see  createCAPK:pkIndex:modulus:exponent:checksum:expiryDate:()
 */
-(NSString *) copyCAPKFile; //D11 response
/**
 * Input returned from requestStringInput()
 *
 * @retval NSString of keys (from '0' to '9') corresponding to the key inputs on the e210/e255/e315
 *
 * @see requestStringInput:timeout:maxLen:()
 */
-(NSString *) copyStringResponse; //Z50 response
/**
 * Last EMV tags
 *
 * @retval NSDictionary last successfully processed TVL stream converted to a dictionary with EMV tag values.
 */
-(NSDictionary *) copyLastEMVTags; //last processTLV

/**
 * OPTFLAG values from statusCTLS()
 *
 * Value populated after running statusCTLS().
 *
 * @retval NSString of 16 Digits representing OPTFLAG
 *
 * @see  statusCTLS()
 */
-(NSString*) ctlsOPTFLAG; //D27

/**
 * Contactless reader state after running statusCTLS()
 *
 * Value populated after running statusCTLS().
 *
 * @retval int value representing contactless reader state
 * - 00: Contactless Reader not yet initialized
 * - 01: Contactless Reader has been initalized.
 *
 * @see  statusCTLS()
 */
-(int) ctlsState;  //D27

/**
 * Query and Initialize Idle Prompt
 *
 * @see initializeIdle()
 */
-(void) S01;

/**
 * Query and Initialize Idle Prompt
 *
 * This command verifies the existence of the PIN pad and/or initializes the PIN pad’s idle prompt. Upon receiving command, e210/e255/e315 will disply the idle prompt. XPI reference: S01.
 *
 */
-(void) initializeIdle;

/**
 * Test PIN Pad
 *
 * @see testPINPad()
 */
- (int) S68;
/**
 * Test PIN Pad
 *
 * This command tests the working keys in the PIN pad. Prompt for PIN will be displayed - any PIN can be entered from 4-12 digits. PIN Block will be calculated with Account Number '000000000000' (12-'0's). Result can be obtained in #vfiEncryptionData pinBlock and pinBlockStr. XPI reference: S68.
 *
 * @retval Result Code:
 * - 00: Successful. Evaluate #vfiEncryptionData pinBlock/pinBlockStr for PIN Block
 * - 01: Unsuccessful, no data
 */
- (int) testPINPad;

/**
 * Toggle the Card Reader Off
 *
 * @see disableMSR()
 */
- (void) Q41;
/**
 * Toggle the Card Reader Off
 *
 * This command disallows data entry from the card reader without affecting the PINPad display.  XPI reference: Q41 
 */
- (void) disableMSR;

/**
 * Toggle the Card Reader On
 *
 *\deprecated Replaced by Q42()
 *
 * @see enableMSR()
 */
- (void) Q40;

/**
* Toggle the Card Reader On
*
* This command allows data entry from the card reader without affecting the PINPad display. XPI will only return a response on a successful card read to VFIPinpadDelegate::pinpadMSRData:expMonth:expYear:trackData:(). If a card read fails, XPI will display CARD READ ERROR and re-prompt without returning a response to the calling application. XPI reference: Q40
* 
*\deprecated Replaced by enableMSRDualTrack()
*/
- (void) enableMSR;

/**
 * Toggle the Card Reader On
 *
 * @see enableMSRDualTrack()
 */
- (void) Q42;
/**
 * Toggle the Card Reader On
 *
 * This command allows data entry from the card reader without affecting the PINPad display. XPI will only return a response on a successful card read to VFIPinpadDelegate::pinpadMSRData:expMonth:expYear:track1Data:track2Data:(). If a card read fails, XPI will display CARD READ ERROR and re-prompt without returning a response to the calling application. XPI reference: Q42
 */
- (void) enableMSRDualTrack;

/**
 * Set Currency Symbol
 *
 * @see setCurrencySymbol:()
 */
- (void) PS01:(NSString*)symbol;

/**
 * Set Currency Symbol
 *
 * This Property Set command will automatically configure the Config parameter XPICURR. XPI reference: PS01
 *
 * @param symbol Currency Symbol(s). If empty, no currency symbol will be used in all XPI amount display.
 Maximum number of characters is 3 characters.
 */
- (void) setCurrencySymbol:(NSString*)symbol;



/**
 * Create CAPK File
 *
 * @see createCAPK:pkIndex:modulus:exponent:checksum:expiryDate:()
 */
-(int) D11:(NSString *)RID pkIndex:(int)index modulus:(NSData *)modulus exponent:(NSData *)exp checksum:(NSData *)csum expiryDate:(NSDate *)date __attribute((deprecated("use method D11a instead")));
/**
 * Create CAPK File
 *
 * @see createCAPKFile:pkIndex:modulus:exponent:checksum:expiryDate:()
 */
-(int) D11a:(NSString *)RID pkIndex:(NSString*)index modulus:(NSData *)modulus exponent:(NSData *)exp checksum:(NSData *)csum expiryDate:(NSDate *)date;

/**
 * Create CAPK File
 *
 This command will create the CAPK File and update the EST table. Application will search for the existing CAPK file name in the EST and if no match is found, the new CAPK File name will be inserted in the empty slot.
 
 CAPK File name format is the first and last letter of the RID plus the Index number. The extension is EMV.
 
 Ex: A398.EMV is the CAPK file name for RID A000000003, PK Index 98 for SC 5000 devices. The name will be different for other devices.
 
 If successful, file name of CAPK created can be retrieve by calling copyCAPKFile()	
 
 XPI reference: D11.
 
  @param RID RID Number, ASCII string
  @param index PK Index (ASCII)
  @param modulus Modulus value (HEX)
  @param exp Exponent value (HEX)
  @param csum Hash Value (Hex 20 bytes), Optional
  @param date Expiry Date, Optional
 *
 * @retval Result Code:
 * - 00: Successful - retrieve file name of CAPK by calling copyCAPKFile()
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) createCAPK:(NSString *)RID pkIndex:(int)index modulus:(NSData *)modulus exponent:(NSData *)exp checksum:(NSData *)csum expiryDate:(NSDate *)date __attribute((deprecated("use method createCAPKFile instead")));


/**
 * Create CAPK File
 *
 This command will create the CAPK File and update the EST table. Application will search for the existing CAPK file name in the EST and if no match is found, the new CAPK File name will be inserted in the empty slot.
 
 CAPK File name format is the first and last letter of the RID plus the Index number. The extension is EMV.
 
 Ex: A398.EMV is the CAPK file name for RID A000000003, PK Index 98 for SC 5000 devices. The name will be different for other devices.
 
 If successful, file name of CAPK created can be retrieve by calling copyCAPKFile()
 
 XPI reference: D11.
 
 @param RID RID Number, ASCII string
 @param index PK Index (ASCII)
 @param modulus Modulus value (HEX)
 @param exp Exponent value (HEX)
 @param csum Hash Value (Hex 20 bytes), Optional
 @param date Expiry Date, Optional
 *
 * @retval Result Code:
 * - 00: Successful - retrieve file name of CAPK by calling copyCAPKFile()
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) createCAPKFile:(NSString *)RID pkIndex:(NSString*)index modulus:(NSData *)modulus exponent:(NSData *)exp checksum:(NSData *)csum expiryDate:(NSDate *)date;

/**
 * Retrieve Status of Contactless Reader
 *
 * @see statusCTLS()
 */
-(int) D27;

/**
 * Retrieve Status of Contactless Reader
 *
 * This command is used to retrieve the current status of Contactless Reader and OPTFLAG. XPI reference: D27. If successful in retrieving the Contactless State, then the reader state can be retrieved by calling ctlsState() and the OPTFlag Values can be retreived by calling ctlsOPTFLAG().
 *
 * @retval Result Code:
 * - 00: Successful in retrieving the Contactless Reader State - retrieve values by calling ctlsState() and ctlsOPTFLAG()
 * - 01: Contactless is being initialized. If this command is issued immediately after initializeContactless:sig:CVM:() or setAdditionalEVMFlags:ctlsMode:pdolSupport:(). Contactless Reader State returned will be 00.
 * - 02: Failure. Possible cause is VxCI is not installed
 * - 03: Failure. Contactless is disabled via OPTFLAG.
 */
-(int) statusCTLS;

/**
 * Create EMV Tables
 *
 * @see createTable:numRecords:()
 */
-(int) D16:(int)tableID numRecords:(int)reccnt;

/**
 * Create EMV Tables
 *
This command will create an empty EMV Card Scheme Table (EST), EMV Configuration Table (MVT), Extended EMV Card Scheme Table (EEST) and Extended EMV Configuration Table (EMVT) on the PIN pad.
 
 XPI reference: D16.
 
 @param tableID Table Type, must be one of the following values:
 - 01: Create EST Table
 - 02: Create MVT Table
 - 03: Create EEST Table
 - 04: Create EMVT Table
 @param reccnt Number of records in the designated table to create (001 - 999)
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 * - 10: Invalid table ID .
 */
-(int) createTable:(int)tableID numRecords:(int)reccnt;

/**
 * Initialize CTLS Reader
 *
 * @see initializeContactless:sig:CVM:()
 */
-(int) D18:(NSData *)termCAPQPS sig:(NSData *)termCAPSig CVM:(float)cvmAmount;

/**
 * Initialize CTLS Reader
 *
 This command will initialize the contactless reader with the supported Contactless AID’s and CAPK files. Each time the AID’s or CAPK files are created or changed, this command must be sent to update the reader.
 
 This command is for EMV Contactless only; it is not supported for MSD Contactless.
 
Either all the optional fields are included or none of them are included. If optional fields are not included, PIN pad does not check TTQ in the config file for CVM setting.
 
 XPI reference: D18.
 
 @param termCAPQPS Optional, 6-bytes padded with zeros
 @param termCAPSig Optional, 6-bytes padded with zeros
 @param cvmAmount CVM Amount; can be up to a 12 digit value including a 2-digit decimal
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) initializeContactless:(NSData *)termCAPQPS sig:(NSData *)termCAPSig CVM:(float)cvmAmount;


/**
 * Update PassThru Configuration File
 *
 * @see updatePassThru:aid:version:()
 */
-(int) D26:(int)recordNum aid:(NSString*)aid version:(NSString*)version;

/**
 * Update PassThru Configuration File
 *
 
 This command will update a record  used in PassThru mode to configure the reader to accept the ValueLink card.
 
 XPI reference: D26.
 
 @param recordNum Record number 01 - 10
 @param aid AID 5 to 34 characters
 @param version Application Version Name (ASCII Hex string)
  *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Parameter
 * - 03: Failure on updating (Write Failed)

 */
-(int) updatePassThru:(int)recordNum aid:(NSString*)aid version:(NSString*)version;


/**
 * Additional EMV Info
 *
 * @see setAdditionalEVMFlags:ctlsMode:pdolSupport:()
 */
-(int) D25:(BOOL)visaDebitFlag ctlsMode:(int)mode pdolSupport:(BOOL)pdolFlag valueLinkCtls:(BOOL)valuLinkFlag amexMode:(int)amexMode;

/**
 * Additional EMV Info
 *
 Sets additional EMV Configuration flags stored in the external PINPad.
 
 The default contactless mode is MSD contactless. If the CTLS mode is changed, the device needs to be rebooted to change the configuration file in the CTLS reader. The PINPad application will display ‘RESTART REQUIRED \ PRESS OK’, upon pressing OK Key, application will reboot. In order to enable the Visa DEBIT flag the visaDebitFlag should be set to Boolean ‘YES’ and the modifyCandidateListFlag in the MVT table should be set to ‘YES’ using the updateEMVConfigRecord:tableData:() command task.
 
 XPI reference: D25.
 
 @param visaDebitFlag Indicates whether VISA Debit Opt-Out is enabled or not
 @param mode Contactless mode, 0 – EMV Contactless, 1 – MSD Contactless, 2 – CTLS Disabled
 @param pdolFlag Indicates whether PDOL is supported or not. 1=ON, 0=OFF;
 @param valuLinkFlag Indicates whether Valulink is supported or not. 1=ON, 0=OFF;
 @param amexMode AMEX Contactless mode, 0 – Default, same as Contactless Mode, 1 – MSD Mode, 2 – EMV Mode
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) setAdditionalEVMFlags:(BOOL)visaDebitFlag ctlsMode:(int)mode pdolSupport:(BOOL)pdolFlag valueLinkCtls:(BOOL)valuLinkFlag amexMode:(int)amexMode;


/**
 * Additional EMV Info
 *
 * @see setAdditionalEVMFlags:ctlsMode:pdolSupport:()
 */
-(int) D25:(BOOL)visaDebitFlag ctlsMode:(int)mode pdolSupport:(BOOL)pdolFlag;

/**
 * Additional EMV Info
 *
 Sets additional EMV Configuration flags stored in the external PINPad.
 
The default contactless mode is MSD contactless. If the CTLS mode is changed, the device needs to be rebooted to change the configuration file in the CTLS reader. The PINPad application will display ‘RESTART REQUIRED \ PRESS OK’, upon pressing OK Key, application will reboot. In order to enable the Visa DEBIT flag the visaDebitFlag should be set to Boolean ‘YES’ and the modifyCandidateListFlag in the MVT table should be set to ‘YES’ using the updateEMVConfigRecord:tableData:() command task. 
 
 XPI reference: D25.
 
 @param visaDebitFlag Indicates whether VISA Debit Opt-Out is enabled or not
 @param mode Contactless mode, 0 – EMV Contactless, 1 – MSD Contactless, 2 – CTLS Disabled 
 @param pdolFlag Indicates whether PDOL is supported or not
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) setAdditionalEVMFlags:(BOOL)visaDebitFlag ctlsMode:(int)mode pdolSupport:(BOOL)pdolFlag;

/**
 * Update AID in EST (EMV Card Scheme Table)
 *
 * @see updateAIDRecord:AID:partialNameMatch:supportedAID:termAVN:term2ndAVN:recommendedAIDName:()
 */
-(int) D13:(int)recno AID:(int)aidNo partialNameMatch:(BOOL)flag supportedAID:(NSData *)supAID termAVN:(NSData *)avn term2ndAVN:(NSData *)avn2 recommendedAIDName:(NSString *)aidName;

/**
 * Update AID in EST (EMV Card Scheme Table)
 *
 Updates the AID in the EMV Scheme Table (EST) stored in the external PINPad.
 
Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI. 
 
 XPI reference: D13.
 
 @param recno Record number to update (e.g. 01, 02, 03 …)
 @param aidNo AID number to update (e.g. 01, 02, 03 …)
 @param flag Boolean indicator where ‘true’ is partial matching is allowed, and ‘false’ is partial matching is not allowed.
 @param supAID 32 bytes, including NULL; Ex. A0000000031010, A0000000031020
 @param avn Terminal AVN, 6 bytes
 @param avn2 2nd Terminal AVN, 6 bytes
 @param aidName Recommended AID Name, 16 bytes (e.g. ‘VISA’)

 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateAIDRecord:(int)recno AID:(int)aidNo partialNameMatch:(BOOL)flag supportedAID:(NSData *)supAID termAVN:(NSData *)avn term2ndAVN:(NSData *)avn2 recommendedAIDName:(NSString *)aidName;

/**
 * Update AID in EST (EMV Card Scheme Table)
 *
 * @see updateEMVConfigRecord:tableData:()
 */
-(int) D14:(int)recno tableData:(VFIEMVConfiguration* )emvData;

/**
 * Update MVT (EMV Configuration Table)
 *
 Updates the EMV Configuration Table (MVT) stored in the external PINPad.
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D14.
 
 @param recno Record # to be updated with the provided data
 @param emvData Configuration data contained within the VFIEMVConfiguration data object
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateEMVConfigRecord:(int)recno tableData:(VFIEMVConfiguration* )emvData;


/**
 * Update EMVT
 *
 * @see updateExtendedEMVRecord:mvtIndex:groupName:ctlsFloorLimit:ctlsCVMLimit:ctlsTranLimit:ctlsTacDefault:ctlsTacDenial:ctlsTacOnline:visaTTQ:termCapabilities:addTermCapabilities:()
 */
-(int) D19:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq termCapabilities:(NSString*)termCapb addTermCapabilities:(NSString*)addTermCapb ctlsCountry:(NSString*)country ctlsCurrency:(NSString*)currency;

/**
 * Update EMVT
 *
 This command will update the EMVT table with the EMV Contactless settings for the reader to make decisions during the transaction per card scheme. The command should be sent once for each record number (once for each card scheme record).
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D19.
 
 @param recno Represents the record number to be updated (e.g. 000, 001, 002 …)
 @param emvIndex EMV Configuration Table Index (00-99); should be the same as the EMV index in the EEST table for the same card type
 @param group Identifying group name, 20 bytes right padded with 0x00 (e.g. “VISA”, “MASTERCARD” …)
 @param ctlsFloor Contactless floor limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsCVM Contactless CVM limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsTran Contactless transaction limit; can be up to a 12 digit value including a 2-digit decimal
 @param tacDefault TAC Default value, 10-byte hexadecimal
 @param tacDenial TAC Denial value, 10-byte hexadecimal
 @param tacOnline TAC Online value, 10-byte hexadecimal
 @param ttq Visa TTQ, 8-byte hexadecimal
 @param termCapb Represents the card data input, CVM, and security capabilities of the device.
 @param addTermCapb Represents the data input and output capabilities of the device.
 @param country Country code used for contactless transactions
  - 840 = US
  - 124 = CANADA
 @param currency Currency code used for contactless transactions
 - 840 = US
 - 124 = CANADA
 
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateExtendedEMVRecord:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq termCapabilities:(NSString*)termCapb addTermCapabilities:(NSString*)addTermCapb ctlsCountry:(NSString*)country ctlsCurrency:(NSString*)currency;


/**
 * Update EMVT
 *
 * @see updateExtendedEMVRecord:mvtIndex:groupName:ctlsFloorLimit:ctlsCVMLimit:ctlsTranLimit:ctlsTacDefault:ctlsTacDenial:ctlsTacOnline:visaTTQ:termCapabilities:addTermCapabilities:()
 */
-(int) D19:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq termCapabilities:(NSString*)termCapb addTermCapabilities:(NSString*)addTermCapb;

/**
 * Update EMVT
 *
 This command will update the EMVT table with the EMV Contactless settings for the reader to make decisions during the transaction per card scheme. The command should be sent once for each record number (once for each card scheme record).
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D19.
 
 @param recno Represents the record number to be updated (e.g. 000, 001, 002 …)
 @param emvIndex EMV Configuration Table Index (00-99); should be the same as the EMV index in the EEST table for the same card type
 @param group Identifying group name, 20 bytes right padded with 0x00 (e.g. “VISA”, “MASTERCARD” …)
 @param ctlsFloor Contactless floor limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsCVM Contactless CVM limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsTran Contactless transaction limit; can be up to a 12 digit value including a 2-digit decimal
 @param tacDefault TAC Default value, 10-byte hexadecimal
 @param tacDenial TAC Denial value, 10-byte hexadecimal
 @param tacOnline TAC Online value, 10-byte hexadecimal
 @param ttq Visa TTQ, 8-byte hexadecimal
 @param termCapb Represents the card data input, CVM, and security capabilities of the device.
 @param addTermCapb Represents the data input and output capabilities of the device.

 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateExtendedEMVRecord:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq termCapabilities:(NSString*)termCapb addTermCapabilities:(NSString*)addTermCapb;

/**
 * Update EMVT
 *
 * @see updateExtendedEMVRecord:mvtIndex:groupName:ctlsFloorLimit:ctlsCVMLimit:ctlsTranLimit:ctlsTacDefault:ctlsTacDenial:ctlsTacOnline:visaTTQ:
 */
-(int) D19:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq;

/**
 * Update EMVT
 *
 This command will update the EMVT table with the EMV Contactless settings for the reader to make decisions during the transaction per card scheme. The command should be sent once for each record number (once for each card scheme record).
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D19.
 
 @param recno Represents the record number to be updated (e.g. 000, 001, 002 …)
 @param emvIndex EMV Configuration Table Index (00-99); should be the same as the EMV index in the EEST table for the same card type
 @param group Identifying group name, 20 bytes right padded with 0x00 (e.g. “VISA”, “MASTERCARD” …)
 @param ctlsFloor Contactless floor limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsCVM Contactless CVM limit; can be up to a 12 digit value including a 2-digit decimal
 @param ctlsTran Contactless transaction limit; can be up to a 12 digit value including a 2-digit decimal
 @param tacDefault TAC Default value, 10-byte hexadecimal
 @param tacDenial TAC Denial value, 10-byte hexadecimal
 @param tacOnline TAC Online value, 10-byte hexadecimal
 @param ttq Visa TTQ, 8-byte hexadecimal

 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateExtendedEMVRecord:(int)recno mvtIndex:(int)emvIndex groupName:(NSString *)group ctlsFloorLimit:(float)ctlsFloor ctlsCVMLimit:(float)ctlsCVM ctlsTranLimit:(float)ctlsTran ctlsTacDefault:(NSData *)tacDefault ctlsTacDenial:(NSData *)tacDenial ctlsTacOnline:(NSData *)tacOnline visaTTQ:(NSData *)ttq;


/**
 * Update ICCT
 *
 * @see updateICCT:ctlsMerchantType:ctlsTermTransInfo:ctlsTermTransType:ctlsReqReceiptLimit:ctlsOptionStatus:ctlsReaderFlooorLimit:
 */
-(int) D20:(int)recno ctlsMerchantType:(int)merchType ctlsTermTransInfo:(NSString*)transInfo ctlsTermTransType:(NSString*)transType ctlsReqReceiptLimit:(float)ctlsReceipt ctlsOptionStatus:(NSString*)optionStatus ctlsReaderFlooorLimit:(float)ctlsFloor;

/**
 * Update ICCT
 *
This command will update the Interac Contactless Configuration (ICCT) Table with the parameters required in order to configure the CTLS reader to accept Interac cards.
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D20.
 
 @param recno Record number of the ICCT (e.g. 000, 001, 002 …)
 @param merchType Merchant Type Indicator used by the card to choose limits for card risk management. Valid values 01 – 05
 @param transInfo Provides Terminal Transaction Information such as; display capability, Interac contact interface application support, online capabilities, and card read capabilities (mag stripe, contact). Tag 9F59
 @param transType A dynamic value that must to updated to provide the reader with the current transaction type. 9F5A
 @param ctlsReceipt Terminal Contactless Receipt Required Limit – Limit amount used to compare against Transaction amount to automatically print a transaction record. Right padded with '0', include 2 digit decimal. 9F5D
 @param optionStatus Options supported by the terminal defining how to process transactions using a different currency or country code. 9F5E
 @param ctlsFloor Floor limit amount used to compare against Transaction amount. 9F5F
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateICCT:(int)recno ctlsMerchantType:(int)merchType ctlsTermTransInfo:(NSString*)transInfo ctlsTermTransType:(NSString*)transType ctlsReqReceiptLimit:(float)ctlsReceipt ctlsOptionStatus:(NSString*)optionStatus ctlsReaderFlooorLimit:(float)ctlsFloor;


/**
 * Update EEST Table
 *
 * @see updateExtendedSchemeRecord:emvRecord:AID:maxAIDLen:appFlow:partialName:acctSelect:enableCtls:transScheme:()
 */
-(int) D17:(int)recno emvRecord:(int)emvRecno AID:(NSString *)aid maxAIDLen:(int)maxLen appFlow:(int)flow partialName:(BOOL)pflag acctSelect:(BOOL)aflag enableCtls:(BOOL)cflag transScheme:(int)scheme;

/**
 * Update EEST Table
 *
 Updates the Extended EMV Scheme Table (EEST) stored in the external PINPad.
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D17.
 
 @param recno Represents the record number to be updated (e.g. 000, 001, 002 …)
 @param emvRecno EMV Record Number to be updated (00-99)
 @param aid Supported AID, 32 bytes padded with 0x00
 @param maxLen Maximum AID Length
 @param flow '01' `<MASTERCARD>`, '02' AMEX, '03' MC MSTRIPE, '06' `<VISA>`, '13' DISCOVER, '14' JCB, '21' INTERAC
 @param pflag Partial Name flag
 @param aflag Account Selection flag
 @param cflag Contactless enable flag
 @param scheme Decimal representation of Transaction Scheme bit field
 - MasterCard AIDs : 129 – MSD Only, 193 – MSD and MChip
 - Visa AIDs : 128 – MSD Only, 192 – MSD and qVSDC
 - Interac : 128 – MSD Only
 - American Express AID : 194 – MSD Only
 - Discover AID : 128 – MSD Only
 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateExtendedSchemeRecord:(int)recno emvRecord:(int)emvRecno AID:(NSString *)aid maxAIDLen:(int)maxLen appFlow:(int)flow partialName:(BOOL)pflag acctSelect:(BOOL)aflag enableCtls:(BOOL)cflag transScheme:(int)scheme;


/**
 * Update Scheme Record
 *
 * @see updateSchemeRecord:numberTrans:scheme:regId:CSNList:emvTableRecord:CSNFile:()
 */
-(int) D15:(int)recno numberTrans:(long)numTrans scheme:(NSString *)schemeLabel regId:(NSString *)RID CSNList:(NSString *)csn emvTableRecord:(long)rec CSNFile:(NSString *)csnFile;

/**
 * Update Scheme Record
 *
 Updates Registered Application Provider ID (RID) information in the EMV Scheme Table (EST) stored in the external PINPad. CAPK files will be removed if they are named in the scheme record when the new record is updated.
 
 Knowledge of the EMV Scheme Table (EST) is required in order to properly manage updates. Refer to the EST Record Structure in the API Specification for XPI.
 
 XPI reference: D15.
 
 @param recno Represents the record number to be updated (e.g. 00, 01, 02 …)
 @param numTrans Number of Transactions
 @param schemeLabel Scheme Labe; 36 bytes maximum
 @param RID Registered Application Provider ID; 11 bytes maximum
 @param csn CSN; 32 bytes maximum
 @param rec EMV Table Record Number
 @param csnFile CSN File; 31 bytes maximum

 *
 * @retval Result Code:
 * - 00: Successful
 * - 02: Invalid Data Format. One or more packets are invalid.
 * - 04: Error Opening Table
 * - 05: Error Reading Table
 * - 06: Error Writing to a Table
 * - 07: Error Closing Table
 * - 08: Error in table record. The file containing the table data is corrupt or has invalid data.
 * - 09: Table filename duplication. The table filename is already registered and has an associated table ID.
 */
-(int) updateSchemeRecord:(int)recno numberTrans:(long)numTrans scheme:(NSString *)schemeLabel regId:(NSString *)RID CSNList:(NSString *)csn emvTableRecord:(long)rec CSNFile:(NSString *)csnFile;


/**
 * Get Encryption Mode
 *
 * @see getEncryptionMode()
 */
-(EncryptionMode) E00;
/**
 * Get Encryption Mode
 *
 * This command can be used to vfi_query XPI for the current encryption mode. XPI reference: E00
 *
 * @retval EncryptionMode()
 */
-(EncryptionMode) getEncryptionMode;
/**
 * Retrieve EParms Data
 *
 * @see retrieveEParmsData()
 */
-(int) E02;
/**
 * Retrieve EParms Data
 *
 * The request for EParms data - this method will be used in conjunction with the card data retrieval commands – 81, C30/31, S16, and S20. The request for EParms data (E02) should be sent to XPI once the entered card data is returned by the command. The information will be retrieved from the VCL, and returned to the controller in the EParms response.
 
 Upon successful response, data can be retrieved in #vfiCipheredData EParms
 
 XPI reference: E02
 *
 * @retval Result Code:
 * - 00: Successful.  Retrieve EParms from #vfiCipheredData
 * - 01: VSP Module Error, no data.
 * - 02: EParms Error
 * - 99: Error, no VSP / Invalid command format
 */
-(int) retrieveEParmsData;

/**
 * Perform TGK Update Request
 *
 * @see performTGKUpdateRequest()
 */
-(int) E04;

/**
 * Perform TGK Update Request
 *
 * TTGK will be implemented by creating a new command, which will allow for the new PAN and discretionary keys to be retrieved.
 
 Upon successful response, data can be retrieved in #vfiCipheredData TKG values
 
 XPI reference: E04
 *
 * @retval Result Code:
 * - 00: Successful.  Retrieve TKG values from #vfiCipheredData
 * - 01: VSP Module Error, no data.
 * - 02: TGK Error
 * - 99: Error, no VSP / Invalid command format
 */
-(int) performTGKUpdateRequest;

/**
 * Ge Ciphered Data
 *
 * @see getCipheredData()
 */
-(int) E06;

/**
 * Get PKI Ciphered Data
 *
 * This command is used to retrieve the KeyID and the ciphered Track 2, Track 1, or PAN-Expiry data.
 
 Upon successful response, data can be retrieved in #vfiCipheredData keyID, dataType and encryptedBlob values
 
 XPI reference: E06
 *
 * @retval Result Code:
 * - 00: Successful.  keyID, dataType and encryptedBlob values from #vfiCipheredData
 * - 01: No Encrypted Track Data.
 * - 02: Crypto Error
 * - 99: Command currently Not Supported
 */
-(int) getPKICipheredData;

/**
 * Get Ciphered Data
 *
 * This command is used to retrieve the KeyID and the ciphered Track 2, Track 1, or PAN-Expiry data.
 
 Upon successful response, data can be retrieved in #vfiCipheredData keyID, dataType and encryptedBlob values
 
 XPI reference: E06
 *
 * @retval Result Code:
 * - 00: Successful.  keyID, dataType and encryptedBlob values from #vfiCipheredData
 * - 01: No Encrypted Track Data.
 * - 02: Crypto Error
 * - 99: Command currently Not Supported
 */
-(int) getCipheredData;

/**
 * Load Key Information
 *
 * @see loadKeyInformation_RSA:publicKeyID:()
 */
-(int) E08_RSA:(NSString*)publicKeyRSA publicKeyID:(NSString*)keyID;

/**
 * Get PKI Ciphered Data
 *
The E08 command can be used to load the initial PKI Public Key, or update the existing key. If the E08 command is sent while VSP is enabled, the E10 command will need to be sent to disable VSP and enable PKI encryption.
 
 Upon unsuccessful response, error code can be retrieved in #keyLoadErrorCode
 
 XPI reference: E08
 
 @param publicKeyRSA RSA Publick Key in Base 64 format
 @param keyID Key Identifer
 *
 * @retval Result Code:
 * - 00: Successful.
 * - 01: Failure.  Refer to #keyLoadErrorCode
 */
-(int) loadKeyInformation_RSA:(NSString*)publicKeyRSA publicKeyID:(NSString*)keyID;

/**
 * Load Key Information
 *
 * @see loadKeyInformation_x509:()
 */
-(int) E08_x509:(NSString*)publicKeyX509;

/**
 * Get PKI Ciphered Data
 *
 The E08 command can be used to load the initial PKI Public Key, or update the existing key. If the E08 command is sent while VSP is enabled, the E10 command will need to be sent to disable VSP and enable PKI encryption.
 
 Upon unsuccessful response, error code can be retrieved in #keyLoadErrorCode
 
 XPI reference: E08
 
 @param publicKeyX509 X.509 Public Key Cert in Base 64
 *
 * @retval Result Code:
 * - 00: Successful.
 * - 01: Failure.  Refer to #keyLoadErrorCode
 */
-(int) loadKeyInformation_x509:(NSString*)publicKeyX509;

/**
 * Select Encryption Mode
 *
 * @see selectEncryptionMode:()
 */
-(EncryptionMode) E10:(EncryptionMode)mode;

/**
 * Select Encryption Mode
 *
 This command is used to select the encryption mode to be used during runtime. If PKI is set, VSP will be disabled to prevent double encryption during card swipe. If VSP is set, VSP will be enabled, and PKI encryption will not be used.
 
 The config.sys variable XPIDEFSEC allows the user to set the default encryption mode during startup. If a new value is sent with the E10 command, the parameter value will be updated.
 
 XPI reference: E10
 
 @param mode EncryptionMode() to set
 *
 * @retval EncryptionMode(). If unsuccessful, then returns value of previous setting.

 */
-(EncryptionMode) selectEncryptionMode:(EncryptionMode)mode;
/**
 * Select Encryption Mode
 *
 * @see selectEncryptionMode:keyIndex:()
 */
-(EncryptionMode) E10:(EncryptionMode)mode keyIndex:(int)index;

/**
 * Select Encryption Mode
 *
 This command is used to select the encryption mode to be used during runtime. If PKI is set, VSP will be disabled to prevent double encryption during card swipe.
 
 This command will support VSD mode of encryption. VSD supports 10 DUPKT key slots, indexed from 0 to 9. Optionally the key slot or key index may be specified with E10. Key index defaults to 00 if no index is specified.
 
 The config.sys variable XPIDEFSEC allows the user to set the default encryption mode during startup. If a new value is sent with the E10 command, the parameter value will be updated.
 
 XPI reference: E10
 
 @param mode EncryptionMode() to set
 @param index Index of DUKPT key. This optional value is in the range of 0 to 9 and only applicable if Encryption Mode = EncryptionMode_VSD. The default value is 0;
 *
 * @retval EncryptionMode(). If unsuccessful, then returns value of previous setting.  If return value is EncryptionMode_VSD, then property vsdKeyIndex can be polled for the DUPKT key slot number.
 
 */
-(EncryptionMode) selectEncryptionMode:(EncryptionMode)mode keyIndex:(int)index;

/**
 * Load PKI Signature Files
 *
 * @see loadPKISig:p75Data:()
 */
-(int) E12:(int)type p75Data:(NSData*)data;

/**
 * Load PKI Signature Files
 *
This command will be used to inject the P7S binary data associated to the “PKI Public Key File” and “Key ID File”. This command must be executed prior to the execution of E08 command.
  
 XPI reference: E12
 
 @param type Sign File Data associated to:
 * - 00: P7S Data is for PKI Public Key File.
 * - 01: P7S Data is for Key ID File
 @param data Hex data of the P7S file associated with the Public Key or Key ID Files

 * @retval Result Code:
 * - 00: Successful.
 * - 01: Failure. 
 */
-(int) loadPKISig:(int)type p75Data:(NSData*)data;

/**
 * Get Key ID Command
 *
 * @see getKeyID()
 */
-(int) E14;

/**
 * Get Key ID Command
 *
 * This command will return the key ID for the public PKI key currently loaded in the device. If the command is successful, the current keyID is stored in the keyID property of VFICipheredData.

 *
 * @retval Result returns an Integer value
 * - 99: Command Failed/Command Does Not Exist
 * - 0: Command Sucessful
 */
-(int) getKeyID;


/**
 * Cancel Command
 *
 * @see cancelCommand()
 */
-(void) S00;
/**
 * Cancel Command
 *
 This command will cancel any PIN pad command that is pending User Action such as:
 - Card insertion or card swipe
 - Data Entry or Function Key
 - Signature Capture Request
 
 It is recommended that the host device send an S01 command after the S00 command if the WELCOME/BONJOUR message is to appear.
 S00 Command cancels both US and Canadian commands.
 S00 will not display TRANSACTION CANCELED if sent during C30 or S20 commands.
 
 XPI reference: S00
 */
-(void) cancelCommand;

/**
 * Display Message and Wait for Key
 *
 * @see displayMessageAndWait:line2:()
 */
-(int) S11:(NSString *)msg1 line2:(NSString *)msg2;

/**
 * Display Message and Wait for Key
 *
This command is used to display message on the external Pinpad until a key is pressed. Valid keys are `<OK>`, `<CORR>`, or `<CANCEL>` keys. This command is used for card holder acceptance input. Timeout is set to 15 seconds.
 
 XPI reference: S11
 
 @param msg1 A message string to display on the PINPad screen. The message may consist of up to 16 characters.
 @param msg2 A message string to display on the second line of the PINPad screen. The message may consist of up to 16 characters
 
 * @retval Result Code:
 * - 00000: OK Key pressed 
 * - 00001: CORR Key pressed 
 * - 00002: CANCEL Key pressed
 * - 00004: Timeout
 
 NOTE: PIN pad will respond with 00002 code, when request message is more than 16 characters.
 */
-(int) displayMessageAndWait:(NSString *)msg1 line2:(NSString *)msg2;
/**
 * Display Message and Wait for Key
 *
 * @see displayMessageAndWait:line2:line3:line4:()
 */
-(int) S11:(NSString *)msg1 line2:(NSString *)msg2 line3:(NSString *)msg3 line4:(NSString *)msg4;

/**
 * Display Message and Wait for Key
 *
 This command is used to display message on the external Pinpad until a key is pressed. Valid keys are `<OK>`, `<CORR>`, or `<CANCEL>` keys. This command is used for card holder acceptance input. Timeout is set to 15 seconds.
 
 XPI reference: S11
 
 @param msg1 A message string to display on the PINPad screen. The message may consist of up to 16 characters.
 @param msg2 A message string to display on the second line of the PINPad screen. The message may consist of up to 16 characters
 @param msg3 A message string to display on the third line of the PINPad screen. The message may consist of up to 16 characters
 @param msg4 A message string to display on the fourth line of the PINPad screen. The message may consist of up to 16 characters
 
 * @retval Result Code:
 * - 00000: OK Key pressed
 * - 00001: CORR Key pressed
 * - 00002: CANCEL Key pressed
 * - 00004: Timeout
 
 NOTE: PIN pad will respond with 00002 code, when request message is more than 16 characters.
 */
-(int) displayMessageAndWait:(NSString *)msg1 line2:(NSString *)msg2 line3:(NSString *)msg3 line4:(NSString *)msg4;

/**
 * Store Timer Values
 *
 * @see storeTimers:pin:balance:()
 */

-(void) S07:(int)displayTimer pin:(int)pinTimer balance:(int)balanceTimer;

/**
 * Store Timer Values
 *
 This command will store the Prompt Display, PIN Inter-digit, and Display Balance timers.
 
 Passing a value of 0 to any of the timers will not alter their values. Only a value of greater than zero (0) will change the timer values. The default value for the Prompt Timer and the Inter-digit PIN Timer is 15 seconds. The default value for the Balance Display Timer is 5 seconds. 
 
 XPI reference: S07
 
 @param displayTimer Prompt Display Timer
 @param pinTimer Inter-digit PIN Entry Timer (time-out value between the entry of each digit of the PIN during the pin entry request)
 @param balanceTimer Account Balance Display Timer
 */
-(void) storeTimers:(int)displayTimer pin:(int)pinTimer balance:(int)balanceTimer;

/**
 * General Prompt Response
 *
 * Creates a new NSString object containing the results of the last general prompt request command. 
 *
 * @retval NSString object containing the cardholder entered data in response to the general prompt request command task 
 *
 * @see  generalPrompt:message2:minLength:maxLength:language:allowSkip:secureEntry:displayCanceled:restoreScreen:()
 * @see  generalPromptDefault:message2:minLength:maxLength:language:initialValue:allowSkip:()
 */
-(NSString *) copyPromptData; //S12 response

/**
 * General Prompt Entry
 *
 * @see generalPrompt:message2:minLength:maxLength:language:allowSkip:secureEntry:displayCanceled:restoreScreen:()
 */
-(int) S12:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode allowSkip:(BOOL)flag  secureEntry:(BOOL)secure  displayCanceled:(BOOL)display  restoreScreen:(BOOL)restore;

/**
 * General Prompt Entry
 *
Displays prompts that are pre-defined in XPI (e.g. fleet prompts) using the optional protected mode. Each message ID consists of three characters in the range of 000-999. Message IDs correspond to the index in the General Message Table:
  - \subpage messagetable "General Message Table"
 
 Successful prompt entry will be returned in copyPromptData()
 
 XPI reference: S12
  
 @param msgID1 Message ID for line 1 to identify the pre-defined message(s) to display on the PINPad screen.
 @param msgID2 Message ID for line 2 to identify the pre-defined message(s) to display on the PINPad screen.
 @param minLen  Numeric value indicating the minimum data entry length allowed for the prompt response.
 @param maxLen Numeric value indicating the maximum data entry length allowed for the prompt response.
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French. @param flag Boolean value indicating whether the user can press the enter key to skip the data entry.
 @param secure Boolean value indicating whether the user entered data should be masked (*) or not.
 @param display Boolean value indicating whether to display CANCELLED when cancelled is pressed not.
 @param restore Boolean value indicating whether to display idle screen after execution or not.

 
 * @retval Result Code:
 * - 00: OK Key pressed. Input data returned in copyPromptData()
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 
 */
-(int) generalPrompt:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode allowSkip:(BOOL)flag secureEntry:(BOOL)secure  displayCanceled:(BOOL)display  restoreScreen:(BOOL)restore;

/**
 * General Prompt Entry
 *
 * @see  generalPromptDefault:message2:minLength:maxLength:language:initialValue:allowSkip:()
 */
-(int) S12Default:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode initialValue:(NSString *)defaultValue allowSkip:(BOOL)flag;

/**
 * General Prompt Entry
 *
 Displays prompts that are pre-defined in XPI (e.g. fleet prompts) using the non-protected mode. Each message ID consists of three characters in the range of 000-999. Message IDs correspond to the index in the General Message Table :
 - \subpage messagetable "General Message Table"
 
 Successful prompt entry will be returned in copyPromptData()
 
 This method provides a means to populate the result data with an initial default value. XPI reference: S12
 
 @param msgID1 Message ID for line 1 to identify the pre-defined message(s) to display on the PINPad screen.
 @param msgID2 Message ID for line 2 to identify the pre-defined message(s) to display on the PINPad screen.
 @param minLen  Numeric value indicating the minimum data entry length allowed for the prompt response.
 @param maxLen Numeric value indicating the maximum data entry length allowed for the prompt response.
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French. @param defaultValue Default value to be used to populate the cardholder data entry initial value
 @param flag Boolean value indicating whether the user can press the enter key to skip the data entry.
 
 
 * @retval Result Code:
 * - 00: OK Key pressed. Input data returned in copyPromptData()
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 
 */
-(int) generalPromptDefault:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode initialValue:(NSString *)defaultValue allowSkip:(BOOL)flag;

/**
 * General Prompt Entry
 *
 * @see generalPrompt:message2:minLength:maxLength:language:allowSkip:secureEntry:()
 */
-(int) S12:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode allowSkip:(BOOL)flag secureEntry:(BOOL)secure;

/**
 * General Prompt Entry
 *
 Displays prompts that are pre-defined in XPI (e.g. fleet prompts) using the optional protected mode. Each message ID consists of three characters in the range of 000-999. Message IDs correspond to the index in the General Message Table:
 - \subpage messagetable "General Message Table"
 
 Successful prompt entry will be returned in copyPromptData()
 
 XPI reference: S12
 
 @param msgID1 Message ID for line 1 to identify the pre-defined message(s) to display on the PINPad screen.
 @param msgID2 Message ID for line 2 to identify the pre-defined message(s) to display on the PINPad screen.
 @param minLen  Numeric value indicating the minimum data entry length allowed for the prompt response.
 @param maxLen Numeric value indicating the maximum data entry length allowed for the prompt response.
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French. @param flag Boolean value indicating whether the user can press the enter key to skip the data entry.
 @param secure Boolean value indicating whether the user entered data should be masked (*) or not. 
 
 * @retval Result Code:
 * - 00: OK Key pressed. Input data returned in copyPromptData()
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 
 */
-(int) generalPrompt:(NSString *)msgID1 message2:(NSString *)msgID2 minLength:(int)minLen maxLength:(int)maxLen language:(int)lcode allowSkip:(BOOL)flag secureEntry:(BOOL)secure;

/**
 * Display Menu
 *
 * @see menuChoiceSelection:message2:choice1:choice2:choice3:choice4:()
 */

-(int) S13:(NSString *)msg1 message2:(NSString *)msg2 choice1:(NSString *)cho1 choice2:(NSString *)cho2 choice3:(NSString *)cho3 choice4:(NSString *)cho4;

/**
 * Display Menu
 *
This command is used to display a menu on PIN pad devices with function keys that are available beside the screen. For PIN pad devices without function key buttons beside the device screen, the PIN pad application displays numbers corresponding to the function key buttons on the rightmost corner of the device screen. The user should press the corresponding Alpha/Numeric keypad to select an option displayed on the device screen.
 
 After execution of S13, idle screen will not be displayed and will only display a blank screen.
 
 XPI reference: S13
 
 @param msg1 Message Line 1 to display on the PINPad screen; message may consist of up to 16 characters.
 @param msg2 Message Line 2 to display on the PINPad screen; message may consist of up to 16 characters.
 @param cho1 Choice text for selection from the PINPad using the function keys; choice string can consist of up to 16 characters.
 @param cho2 Choice text for selection from the PINPad using the function keys; choice string can consist of up to 16 characters.
 @param cho3 Choice text for selection from the PINPad using the function keys; choice string can consist of up to 16 characters.
 @param cho4 Choice text for selection from the PINPad using the function keys; choice string can consist of up to 16 characters.

 
 * @retval Result Code:
 * - 00: OK Key pressed
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 10: Function Key 1 pressed
 * - 11: Function Key 2 pressed
 * - 12: Function Key 3 pressed
 * - 13: Function Key 4 pressed
 
 On the e210/e255/e315:
 - The F1 key is replaced by the ‘1’ key. 
 - The F2 key is replaced by the ‘2’ key. 
 - The F3 key is replaced by the ‘3’ key. 
 - The F4 key is replaced by the ‘4’ key.
 
 Display example:
 PIN Pad Display |  .   |   . 
 -------------- | --------- | --------
  .   | Choice1 | 1
 Msg Line1 | Choice2 | 2
 Msg Line2 | Choice3 | 3
  .   | Choice4 | 4

 
 */


-(int) menuChoiceSelection:(NSString *)msg1 message2:(NSString *)msg2 choice1:(NSString *)cho1 choice2:(NSString *)cho2 choice3:(NSString *)cho3 choice4:(NSString *)cho4;
/**
 * Display Messages
 *
 * @see displayMessages:Line2:Line3:Line4:timeout:()
 */
-(void) S14:(NSString *)line1 Line2:(NSString*)line2 Line3:(NSString*)line3 Line4:(NSString*)line4 timeout:(int)timeout;
/**
 * Display Messages
 *
This command will display messages passed by the terminal. This API does not support keyboard input. The PIN pad displays the message until the customer presses the CLEAR key, or until it receives another packet to change the message content or force it back to idle state.
 
 XPI reference: S14
 
 @param line1 A message to display on line 1 of the PINPad screen. May consist of up to 16 characters.
 @param line2 A message to display on line 2 of the PINPad screen. May consist of up to 16 characters.
 @param line3 A message to display on line 3 of the PINPad screen. May consist of up to 16 characters.
 @param line4 A message to display on line 4 of the PINPad screen. May consist of up to 16 characters.
 @param timeout Timeout value. 99999 = No Timeout

 
 Additional Information:
 - Sixty (60) seconds is the timeout default.
 - All display messages are aligned to the center of the screen.
 - Message lines support a maximum of 16 displayable characters. Messages greater than 16 characters will not fully display or will display blank.
 */
-(void) displayMessages:(NSString *)line1 Line2:(NSString*)line2 Line3:(NSString*)line3 Line4:(NSString*)line4 timeout:(int)timeout;

/**
 * Display Messages
 *
 * @see displayMessages:Line2:Line3:Line4:()
 */
-(void) S14:(NSString *)line1 Line2:(NSString*)line2 Line3:(NSString*)line3 Line4:(NSString*)line4;

/**
 * Display Messages
 *
 This command will display messages passed by the terminal. This API does not support keyboard input. The PIN pad displays the message until the customer presses the CLEAR key, or until it receives another packet to change the message content or force it back to idle state.
 
 XPI reference: S14
 
 @param line1 A message to display on line 1 of the PINPad screen. May consist of up to 16 characters.
 @param line2 A message to display on line 2 of the PINPad screen. May consist of up to 16 characters.
 @param line3 A message to display on line 3 of the PINPad screen. May consist of up to 16 characters.
 @param line4 A message to display on line 4 of the PINPad screen. May consist of up to 16 characters.
 
 
 Additional Information:
 - Sixty (60) seconds is the timeout default.
 - All display messages are aligned to the center of the screen.
 - Message lines support a maximum of 16 displayable characters. Messages greater than 16 characters will not fully display or will display blank.
 */
-(void) displayMessages:(NSString *)line1 Line2:(NSString*)line2 Line3:(NSString*)line3 Line4:(NSString*)line4;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 * @see obtainCardData:()
 */
-(int) S16:(int)lcode;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 This command prompts the customer for card entry (“ACCOUNT NUMBER / NO COMPTE”) and returns the track data or appropriate response code if the card is swiped. If VSP is enabled, the track data will be encrypted by the VSP module.
 
 If card number is manually entered, the entry will be followed by the expiration date prompt (“ENTER EXPIRY DATE” “ MMYY” / “DATE D'EXPIRATION” “MMAA”). The card number and the expiration date will be encrypted if VSP keys are loaded and VSP is active on the device.
 
 This prompt will display until the card is removed or, if the TIMEOUT parameter is configured in the XPI configuration file, the terminal times out with the value configured in this parameter. If the timeout is reached, the PIN pad will respond with a TIMEDOUT (‘02’) response.
 
 Upon successful execution, response can be obtained from property #vfiCardData
 
 Card Entry method controlled by the ENTRYMODE XPI configuration parameter on the e210 PINPad:
 - ENTRYMODE=0 (Default) Both Manual and Swipe are supported
 - ENTRYMODE=1 Manual Entry Only is Supported
 - ENTRYMODE=2 Swipe Only is supported
 
 XPI reference: S16
 
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 * @retval Result Code:
 * - 00: OK Key pressed.  Retrive card data from #vfiCardData
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 88: No encryption module is activated

 */
-(int) obtainCardData:(int)lcode;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 * @see obtainCardData:displayIdle:displayExpiry:luhnCheck:entryMode:()
 */
-(int) S16:(int)lcode displayIdle:(BOOL)display displayExpiry:(BOOL)expiry luhnCheck:(BOOL)luhn entryMode:(int)mode;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 This command prompts the customer for card entry (“ACCOUNT NUMBER / NO COMPTE”) and returns the track data or appropriate response code if the card is swiped. If VSP is enabled, the track data will be encrypted by the VSP module.
 
 If card number is manually entered, the entry will be followed by the expiration date prompt (“ENTER EXPIRY DATE” “ MMYY” / “DATE D'EXPIRATION” “MMAA”). The card number and the expiration date will be encrypted if VSP keys are loaded and VSP is active on the device.
 
 This prompt will display until the card is removed or, if the TIMEOUT parameter is configured in the XPI configuration file, the terminal times out with the value configured in this parameter. If the timeout is reached, the PIN pad will respond with a TIMEDOUT (‘02’) response.
 
 Upon successful execution, response can be obtained from property #vfiCardData.
 
 
 XPI reference: S16
 
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param display Flag to determine if idle screen is displayed after execution
 @param expiry Flag to determine to display expiration date prompt
 @param luhn Flag to determine if Luhn check is required
 @param mode Card Entry Mode:
 - 0: Use ENTRYMODE config parameter
 - 1: Manual Only
 - 2: Swipe Only
 - 3: Manual and Swipe
 
 
 
 * @retval Result Code:
 * - 00: OK Key pressed.  Retrive card data from #vfiCardData
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 88: No encryption module is activated
 
 */
-(int) obtainCardData:(int)lcode displayIdle:(BOOL)display displayExpiry:(BOOL)expiry luhnCheck:(BOOL)luhn entryMode:(int)mode;


/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 * @see obtainCardData:displayIdle:displayExpiry:luhnCheck:entryMode:cvvPrompting:masking:timeout()
 */
-(int) S16:(int)lcode displayIdle:(BOOL)display displayExpiry:(BOOL)expiry luhnCheck:(BOOL)luhn entryMode:(int)mode cvvPrompting:(int)cvvPrompt masking:(BOOL)enableMasking timeout:(int)timeout;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 This command prompts the customer for card entry (“ACCOUNT NUMBER / NO COMPTE”) and returns the track data or appropriate response code if the card is swiped. If VSP is enabled, the track data will be encrypted by the VSP module.
 
 If card number is manually entered, the entry will be followed by the expiration date prompt (“ENTER EXPIRY DATE” “ MMYY” / “DATE D'EXPIRATION” “MMAA”). The card number and the expiration date will be encrypted if VSP keys are loaded and VSP is active on the device.
 
 This prompt will display until the card is removed or, if the TIMEOUT parameter is configured in the XPI configuration file, the terminal times out with the value configured in this parameter. If the timeout is reached, the PIN pad will respond with a TIMEDOUT (‘02’) response.
 
 Upon successful execution, response can be obtained from property #vfiCardData.
 
 
 XPI reference: S16
 
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param display Flag to determine if idle screen is displayed after execution
 @param expiry Flag to determine to display expiration date prompt
 @param luhn Flag to determine if Luhn check is required
 @param mode Card Entry Mode:
 - 0: Use ENTRYMODE config parameter
 - 1: Manual Only
 - 2: Swipe Only
 - 3: Manual and Swipe
 @param cvvPrompt Enable CVV prompting:
 - 0: No prompt (default)
 - 1: Prompt for CVV and force entry
 - 2: Prompt but allow to bypass
 @param enableMasking Flag to determine if delayted masking of entry is enabled
 @param timeout Timeout value set between 1-999 seconds. 0 defaults to 30 seconds
 
 
 * @retval Result Code:
 * - 00: OK Key pressed.  Retrive card data from #vfiCardData
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 88: No encryption module is activated
 
 */
-(int) obtainCardData:(int)lcode displayIdle:(BOOL)display displayExpiry:(BOOL)expiry luhnCheck:(BOOL)luhn entryMode:(int)mode cvvPrompting:(int)cvvPrompt masking:(BOOL)enableMasking timeout:(int)timeout;


/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 * @see obtainCardData:displayIdle:()
 */
-(int) S16:(int)lcode displayIdle:(BOOL)display;

/**
 * Obtain Card Data (Manual Entry or Swipe)
 *
 This command prompts the customer for card entry (“ACCOUNT NUMBER / NO COMPTE”) and returns the track data or appropriate response code if the card is swiped. If VSP is enabled, the track data will be encrypted by the VSP module.
 
 If card number is manually entered, the entry will be followed by the expiration date prompt (“ENTER EXPIRY DATE” “ MMYY” / “DATE D'EXPIRATION” “MMAA”). The card number and the expiration date will be encrypted if VSP keys are loaded and VSP is active on the device.
 
 This prompt will display until the card is removed or, if the TIMEOUT parameter is configured in the XPI configuration file, the terminal times out with the value configured in this parameter. If the timeout is reached, the PIN pad will respond with a TIMEDOUT (‘02’) response.
 
 Upon successful execution, response can be obtained from property #vfiCardData.
 
 Card Entry method controlled by the ENTRYMODE XPI configuration parameter on the e210 PINPad:
 - ENTRYMODE=0 (Default) Both Manual and Swipe are supported
 - ENTRYMODE=1 Manual Entry Only is Supported
 - ENTRYMODE=2 Swipe Only is supported
 
 XPI reference: S16
 
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param display Flag to determine if idle screen is displayed after execution

 
 * @retval Result Code:
 * - 00: OK Key pressed.  Retrive card data from #vfiCardData
 * - 01: Unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 88: No encryption module is activated
 
 */
-(int) obtainCardData:(int)lcode displayIdle:(BOOL)display;


/**
 * Derived Key
 *
 * @see derivedKey:()
 */
-(int) E20:(int)command;

/**
 * Derived Key
 *
XPI 6.4.2 supports VSP Derived Key. XPI supports a new command that replaces the requirement to use Registart cards at deployment. In addition, the new command can be used to Advance the key. The Key Advance will not be used often since the key is already changed on every transaction. The E20 Command was added in XPI 6.4.1 release. However, XPI 6.4.1 was not a general release. Therefore, the description of the change for Derived Key is included in the XPI 6.4.2 release notes. The Encryption can be stopped but this would only be used if the merchant is no longer using the VSP service.
 
 Upon successful execution, MSR Synchronization data can be obtained from track property #vfiCardData (optional Track 1, 2, 3).
 
 XPI reference: D20
 
 @param Command Enable, Disable and Advance VSP Derived Key Feature
 - 00: Registart 
 - 01: Registop 
 - 02: Advance DDK
 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive MSR Synchronization data from #vfiCardData (optional Track 1, 2, 3)
 * - 01: Command was unsuccessful

 */
-(int) derivedKey:(int)command;



/**
 * Obtain Track 2 Data
 *
 * @see obtainTrack2Data:optionalAmount:()
 */
-(int) S20:(int)timeout optionalAmount:(float)amount;

/**
 * Obtain Track 2 Data
 *
This command prompts the customer for card swipe and returns the Track 2 data or appropriate response code.
 
 Upon successful execution, response can be obtained from property #vfiCardData.
 
After the command is executed successfully, the PINPad will display ‘PLEASE WAIT’, and ’UN MOMENT S.V.P’ for 120 seconds. If there is an error, an error message will display for 1 second, and return to idle display for 120 seconds. 
 - For Tap transactions:
 The device beeps when the card is tapped indicating the card can be removed.
 This command only accepts MSD tap.
 
 - Card data might be returned with 01 response code. If the track data does not follow ISO standards, this command will return the 01 error, but with the track data. It will be up to the host application to decide how to handle the track data for non-ISO standard cards.
 
 - If value of 000 is sent for the infinite time-out and Contactless is enabled, the command will time-out at 255 seconds.
 
 - If the response code returned from this message request is 0, then the response data can be retrieved by using the #vfiCardData object containing the cardholder entered data value. 
 
 XPI reference: S20
 
 @param timeout A timeout value representing the amount of time, in seconds that the customer has to swipe tap, or insert their card.
 @param amount Optional amount for the transaction for the prompt display
 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive card data from #vfiCardData
 * - 01: Command was unsuccessful or card does not follow ISO standards.  If card does not follow ISO standards, any track data will be returned in #vfiCardData.
 * - 02: Timed out
 * - 03: Command cancelled
 * - 88: No encryption module is activated
 */
-(int) obtainTrack2Data:(int)timeout optionalAmount:(float)amount;

/**
 * Data Entry Request
 *
 * @see dataEntryRequestPrompt:()
 */
-(int) S21prompt:(NSString*)prompt;
/**
 * Data Entry Request
 *
 This command is sent to prompt for Tip, Cashback, and Surcharge at the PIN pad. The PIN pad will prompt the customer to enter the information (if required) and send the data collected to the terminal.
 This command supports backward compatibility. The new enhanced command combinedPromptCommand:language:transID:(menuArray:surcharge:accountNum:ipOptions:cashBackOptions:surchargeOptions:() is recommended instead when possible.
 
 Upon successful execution, response can be obtained from property #vfiDataEntry tipAmount.
 
 XPI reference: S21
 
 @param prompt Secure message prompt (.e.g. ENTER TIP).

 
 * @retval Result Code:
 * - -01: Framework timeout reached
 * - 00: Command was successful.  Retrive card data from #vfiDataEntry tipAmount.
 * - 01: Command was unsuccessful
 * - 03: No response:  Either CANCEL was pressed on keypad, or XPI timeout reached
 * - 04: CORR key was pressed
 
 \deprecated Use combinedPromptCommand:language:transID:(menuArray:surcharge:accountNum:ipOptions:cashBackOptions:surchargeOptions:()
 */
-(int) dataEntryRequestPrompt:(NSString*)prompt;

/**
 * Data Entry Request
 *
 * @see dataEntryRequest:language:tip:cashback:surcharge:()
 */
-(int) S21:(float)amount language:(int)lcode tip:(BOOL)tipFlag cashback:(BOOL)cashbackFlag surcharge:(float)surchgAmt;

/**
 * Data Entry Request
 *
 Prompts the cardholder for additional information for the transaction based on the PINPad configuration. The additional requested data can include Tip, Cash Back, and Surcharge. The PINPad will prompt the cardholder for this information (if required) and return the collected data.
 
 This command supports backward compatibility. The new enhanced command combinedPromptCommand:language:transID:(menuArray:surcharge:accountNum:ipOptions:cashBackOptions:surchargeOptions:() is recommended instead when possible.
 
 Upon successful execution, response can be obtained from property #vfiDataEntry.
 
 XPI reference: S21
 
 @param amount Transaction amount value that is to be displayed
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param tipFlag Indicates whether or not to prompt for tip and collect the amount entered.
 @param cashbackFlag Indicates whether or not to prompt for cash back amount and collect the amount entered
 @param surchgAmt An optional surcharge amount that is to be displayed and confirmed (valid range is from 0.01 to 99.99). A zero amount will cause this prompt to be bypassed.

 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive card data from #vfiDataEntry
 * - 01: Command was unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 
 \deprecated Use combinedPromptCommand:language:transID:(menuArray:surcharge:accountNum:ipOptions:cashBackOptions:surchargeOptions:()
 */
-(int) dataEntryRequest:(float)amount language:(int)lcode tip:(BOOL)tipFlag cashback:(BOOL)cashbackFlag surcharge:(float)surchgAmt;

/**
 * Combined Prompt Command
 *
 * @see combinedPromptCommand:language:transID:menuArray:surcharge:accountNum:tipOptions:cashBackOptions:surchargeOptions:()
 */
-(int) S23:(float)amount language:(int)lcode transID:(int)ID menuArray:(NSString*)promptArray surcharge:(float)surchgAmt accountNum:(NSString*)account tipOptions:(NSString*)tipOpt cashBackOptions:(NSString*)cashBackOpt surchargeOptions:(int)surchargeOpt;

/**
 * Combined Prompt Command
 *
 This command allows the terminal or ECR to send many customer prompt commands and to define the order of those prompts - all with one request to the PIN pad. It includes Enhanced Tip and CashBack options for the customer.
 
 This command also supports the backup of prompts each time the CORR key is pressed.
 
 Prompts can be called in the promptArray. For example, to call the following prompts in this order:
 Confirm Amount - Tip - Confirm Amount - Select Account - Enter PIN
 The value of promptArray would be “0105010203”.
 
 Upon successful execution, response can be obtained from property #vfiDataEntry.
 
 XPI reference: S23
 
 @param amount Transaction amount value that is to be displayed
  @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param ID Transaction Name ID.
 @param promptArray Acceptable Values:
  - 01: Confirm Transaction Amount
  - 02: Select Account
  - 03: Enter (Online)PIN
  - 04: CashBack
  - 05: Tip Entry
  - 06: Surcharge/Fee
  - 07: Confirm Total Amount
 For example, to call the following prompts in this order:
 Confirm Amount - Tip - Confirm Amount - Select Account - Enter PIN
 The value of promptArray would be “0105010203”.
 
 @param surchgAmt An optional surcharge amount that is to be displayed and confirmed (valid range is from 0.01 to 99.99)
 @param account Account number is checked for the length (greater than 8 and less than 25) and all numeric value.
 @param tipOpt Refer to Enhanced Tip Entry and Setup
 @param cashBackOpt Refer to Enhanced CashBack Entry and Setup
 @param surchargeOpt Acceptable Values
 - 01: Always Prompt Surcharge
 - 02: Only prompt if CashBack entered Field Separator
 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive card data from #vfiDataEntry
 * - 01: Command was unsuccessful
 * - 02: Timed out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 06 - Invalid Account Number length
 * - 50 - Invalid Tip Setup
 * - 51 - Invalid Surcharge Setup
 * - 52 - Invalid CashBack Parameters
 * - 79 - Security keys missing
 
 
 \par Enhanced Tip Entry and Setup
 
 Tip Entry options are all configurable and defined in the data sent.
 Options for Tip Entry are as follows:
 1. Select a pre-set dollar amount
 2. Select a pre-set percentage amount
 3. Enter own tip amount
 
 The tip amount entered or selected will be added to the total amount for any following ‘Confirm Amount’ prompts. However, if the CORR key is pressed, and the Tip Entry process starts again, the amount will be removed from the total amount.
 
 Pressing the CORR key at the next prompt will not return to any sub-screen in the Tip Entry process, but will instead restart the Tip Entry process.
 
  \par Enhanced Tip Entry Setup - tipOpt parameter
 
 The tipOpt parameter that is sent in to this command is defined as follows:
 
`<Tip Entry Flag><*><$ Menu Selections><*><% Menu Selections>`
 
  `<Tip Entry Flag>` defines if enhanced Tip is required:
 - 0 - Prompt for Enter Tip only - no Enhanced Tip.
 - 1 - Enhanced Tip screens to be prompted
 
 Note: If Enhanced Tip is enabled and there are missing “Tip Options” settings, XPI will return error code 50 (Invalid Tip Setup).
 
 `<$ Menu Selections>` is an array of 8 digits to be used for menu selections on the amount selection screen:
 -  First 2 digits - the first $ value to appear on the menu
 -  Second 2 digits - the second $ value to appear on the menu 
 -  Third 2 digits - the third $ value to appear on the menu
 -  Fourth 2 digits - the fourth $ value to appear on the menu
 
 Note: The length of this field is to be 8 digits if Enhanced Tip is defined. Otherwise, this field can be left empty.
 
 `<% Menu Selections>` is an array of 8 digits to be used for menu selections on the percentage selection screen:
- First 2 digits - the first % value to appear on the menu
- Second 2 digits - the second % value to appear on the menu 
- Third 2 digits - the third value to appear on the menu%
- Fourth 2 digits - the fourth % value to appear on the menu
 
 
 Note: The length of this field is to be 8 digits if Enhanced Tip is defined. Otherwise, this field can be left empty.
 
 Examples for the “Tip Options” data:
- “1*10203040*10203040”, where Enhanced Tip is defined, and the options for both $ tip and % tip selections are 10, 20, 30 and 40.
- “0**”, where only the Enter Tip prompt will appear
 
 
  \par Enhanced Tip Entry Setup
 
 Tip Screens
 
 The following screens appear during the Enhanced Tip entry process:
 
 **Tip Options Menu** - This menu will appear if Enhanced Tip has been enabled:
- Selecting “$” will prompt the “$ Selection Menu”
- Selecting “%” will prompt the “% Selection Menu”
- Selecting “Other” will prompt the “Enter Tip” prompt 
- Selecting “None” will exit the Tip Entry process

 **$ Selection Menu** - This menu will appear if the “$” selection was made in the Tip Options menu:
- Selecting any option in this menu will return the dollar value with two trailing zeros (implied decimal) in the Tip Amount value in the response data.
- Pressing the CORR key will return to the Tip Options menu if previously displayed.
- Note the values 10, 20, 30, and 40 are example data only.
 
 **% Selection Menu** - This menu will appear, if the “%” selection was made in the Tip Options menu:
- Selecting any option in this menu will calculate the % tip to the transaction amount sent in the request, not including any cashback or surcharge amount, and then add the calculated value with two trailing zeros (implied decimal) in the Tip Amount value in the response data.
- Pressing the CORR key will return to the Tip Options menu, if previously displayed.
- Note the values 10, 20, 30 and 40 are example data only.

 
 --------------------------------------

 \par Enhanced CashBack Entry and Setup
 
 Cashback Entry options are all configurable and defined in the data sent.
 Options for Cashback are as follows:
 1. Select a pre-set dollar amount
 2. Enter own cashback amount
 
The Cashback amount entered or selected will be added to the total amount in any following Confirm Amount prompts. However, if the CORR key is pressed and the CashBack process starts again, the amount must be removed from the total amount.
 
 Pressing the CORR key at the next prompt, will not return to any sub-screen in the CashBack Entry process, but will instead restart the Cashback process.
 
 \par Enhanced CashBack Entry Setup - cashBackOpt parameter
 
 The cashBackOpt parameter that is sent in to this command is defined as follows:
 
 `<CashBack Entry Flag><*><$ Menu Selections>`
 
 `<CashBack Entry Flag>` defines if Enhanced CashBack is required:
 - 0 - Prompt for Enter CashBack only - no Enhanced Cashback.
 - 1 - Enhanced CashBack screens to be prompted
 
 Note: If Enhanced Cashback is enabled and there are missing settings sent, then XPI will return error code 51 (Invalid Cashback Setup).
 
 `<$ Menu Selections>` is an array of 8 digits to be used for menu selections on the amount selection screen:
 -  First 2 digits - the first $ value to appear on the menu
 -  Second 2 digits - the second $ value to appear on the menu
 -  Third 2 digits - the third $ value to appear on the menu
 -  Fourth 2 digits - the fourth $ value to appear on the menu
 
 Note: The length of this field is to be 8 digits if Enhanced CashBack is enabled. Otherwise, this field can be left empty..

 
 Examples for the “Cashback Options” data:
 - “1*10203040” will turn on enhanced CashBack and will display the Enhanced CashBack screens with the options of 10, 20, 30 and 40 appearing if the pre-set $ selection is selected
 - “0**”, where only the Enter CashBack prompt will appear (no Enhanced CashBack).
 
 
 \par Enhanced CashBack Screens
 
 Tip Screens
 
 The following screen appears during the CashBack entry process:
 
 **CashBack Options Menu** - This menu will appear if Enhanced CashBack has been enabled:
- Selecting “$” will prompt the “$ Selection Menu”
- Selecting “Other” will prompt the “Enter CashBack” prompt that is currently supported 
- Selecting “None” will exit the CashBack Entry process
 
 */
-(int) combinedPromptCommand:(float)amount language:(int)lcode transID:(int)ID menuArray:(NSString*)promptArray surcharge:(float)surchgAmt accountNum:(NSString*)account tipOptions:(NSString*)tipOpt cashBackOptions:(NSString*)cashBackOpt surchargeOptions:(int)surchargeOpt;
/**
 * Create Mac Request
 *
 * @see createMac:()
 */
-(int) S66:(NSData *)macData;

/**
 * Create Mac Request
 *
Accepts a string of data to be MAC’ed using the ANSI x9.91 standard and the MAC Working Key. This is used for MAC’ing credit transactions when the PINPad is configured to support both credit and debit.
 
 Upon successful execution, response can be obtained from property #vfiEncryptionData.
 
 XPI reference: S66
 
 *@param macData String of data to be MAC’ed
 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive card data from #vfiEncryptionData
 * - 01: Command was unsuccessful
 * - 79: No Keys, no data
*/
-(int) createMac:(NSData *)macData;

/**
 * Perform Interac Request Transaction
 *
 * @see doInteracRequest:language:amount:pan:mac:()
 */
-(int) S70:(int)transId language:(int)lcode amount:(float)amt pan:(NSString *)acctNumber mac:(NSData *)macData;


/**
 * Perform Interac Request Transaction
 *
Sends a series of data to the PINPad in order to perform a transaction request cycle. The PINPad application will prompt the card holder for confirmation of the total amount, select an account, and PIN entry if required.
 
 Upon successful execution, response can be obtained from property #vfiEncryptionData.
 
 XPI reference: S70
 
 @param transId Transaction type identifier for determining prompts and sequence; valid values are:
 - 0 – Purchase
 - 1 – Refund
 - 2 – Balance Inquiry (not used)
 - 3 – Purchase Correction
 - 4 – Refund Correction
  @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param amt Transaction amount that is to be displayed (can be in the range of 0.01 – 999999.99).
 @param acctNumber Account number with a valid length (greater than 8 and less than 25 characters) and all numeric value.
 @param macData String of data for MAC generation
 - 12 characters - PNS Merchant ID
 - 3 characters - PNS Terminal ID
 - 2 characters – Transaction Code
 - PAN Number
 - Amount (including the decimal)
 - 6 Digits – Sequence Number
 - *D – Indicate that Account Type will be added to the MAC string at this location, before the MAC calculation.
 NOTE: The MAC data string shown here as an example only. It should be formatted as required by the host.
 
 * @retval Result Code:
 * - 00: Command was successful.  Retrive card data from #vfiEncryptionData
 * - 01: Command was unsuccessful
 * - 02: Time-out occurred, no data
 * - 03: CANCEL key was pressed, no data
 * - 04: CORR key was pressed, no data
 * - 06: Invalid Account Number Length
 * - 79: No Keys, no data
 */
-(int) doInteracRequest:(int)transId language:(int)lcode amount:(float)amt pan:(NSString *)acctNumber mac:(NSData *)macData;

/**
 * Perform Interac Response Analysis
 *
 * @see validateMacResponse:language:pinKey:macKey:msgLine1:msgLine2:macData:()
 */

-(int) S71:(NSData *)macBlock language:(int)lcode pinKey:(NSData *)tpkKey macKey:(NSData *)takKey msgLine1:(NSString *)msg1 msgLine2:(NSString *)msg2 macData:(NSData *)data;
/**
 * Perform Interac Response Analysis
 *
 Validates the response MAC and displays any authorization messages returned by the host.
 
 Upon successful execution, response can be obtained from property #vfiEncryptionData.
 
 XPI reference: S71
 
 @param macBlock 8-character MAC Block to verify
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param tpkKey PIN (TPK) Key
 @param takKey MAC (TAK) Key
 @param msg1 Message Line 1 (0-16 bytes)
 @param msg2 Message Line 2 (0-16 bytes)
 @param data Buffer to hold all data to be MAC’ed

 
 * @retval Result Code:
  - 00: Successful
  - 01: Unsuccessful
  - 05: Wrong Prefix (if balance is used, and failed)
  - 07: MAC did not verify
  - 09: No MAC block
  - 11: Bad Key
  - 14: Master key load failed.
  - 16: New Working Key load failed. Revert successfully to the previous Working Keys set.
  - 21: Cannot calculate MAC
  - 23: Invalid field length
  - 98: New Working Keys load failed. Cannot revert to the previous Working Keys
 */
-(int) validateMacResponse:(NSData *)macBlock language:(int)lcode pinKey:(NSData *)tpkKey macKey:(NSData *)takKey msgLine1:(NSString *)msg1 msgLine2:(NSString *)msg2 macData:(NSData *)data;

/**
 * Perform Interac Response Analysis
 *
 * @see validateMacResponseFields:language:msgLine1:msgLine2:macData:identity1:data1:identityK:dataK:()
 */
-(int) S71Fields:(NSData *)macBlock language:(int)lcode msgLine1:(NSString *)msg1 msgLine2:(NSString *)msg2 macData:(NSData *)macdata identity1:(NSData*)identity1 data1:(NSData*)data1 identityK:(NSData*)identityK dataK:(NSData*)dataK;

/**
 * Perform Interac Response Analysis
 *
 Validates the response MAC and displays any authorization messages returned by the host.
 
 Upon successful execution, response can be obtained from property #vfiEncryptionData.
 
 XPI reference: S71
 
 @param macBlock 8-character MAC Block to verify
  @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param msg1 Message Line 1 (0-16 bytes)
 @param msg2 Message Line 2 (0-16 bytes)
 @param macdata Buffer to hold all data to be MAC’ed
 @param identity1 Contains Base 24 field IDs (F, I, H, M) used to identify data in data1
 @param data1 Based upon identity1, I - Working MSG Key, H - Working MAC Key, M - Working PIN Key. Value of this string is concatenated, in the sequence these fields are received, and used for MAC calculation. If working keys are received, they are stored accordingly.
 @param identityK Contains Base 24 field IDs (F, I, H, M) used to identify data in dataK
 @param dataK Based upon identity1, I - Working MSG Key, H - Working MAC Key, M - Working PIN Key. Value of this string is concatenated, in the sequence these fields are received, and used for MAC calculation. If working keys are received, they are stored accordingly.

 
 * @retval Result Code:
 - 00: Successful
 - 01: Unsuccessful
 - 05: Wrong Prefix (if balance is used, and failed)
 - 07: MAC did not verify
 - 09: No MAC block
 - 11: Bad Key
 - 14: Master key load failed.
 - 16: New Working Key load failed. Revert successfully to the previous Working Keys set.
 - 21: Cannot calculate MAC
 - 23: Invalid field length
 - 98: New Working Keys load failed. Cannot revert to the previous Working Keys
 */
-(int) validateMacResponseFields:(NSData *)macBlock language:(int)lcode msgLine1:(NSString *)msg1 msgLine2:(NSString *)msg2 macData:(NSData *)macdata identity1:(NSData*)identity1 data1:(NSData*)data1 identityK:(NSData*)identityK dataK:(NSData*)dataK;

/**
 * Modify TRM Parameters
 *
 * @see setROSParams:threshold:target:targetPercent:()
 */
-(int) C18:(uint)floorLimit threshold:(uint)thresh target:(uint)targ targetPercent:(uint)percent;

/**
 * Modify TRM Parameters
 *
 This function can be used to change the value of Terminal Risk Management parameters dynamically.  The modified values are used only for the next C32 cardAuthorization:otherAmount:merchantDecision:minRequestObjects:() transaction.  The values of the parameters will be reverted to their original values from the MVT for the next C32 transaction. It is advisable to issue that command prior to C32 Command
 
 XPI reference: C18
 
 @param floorLimit New floor limit setting for the subsequent card authorization transaction
 @param thresh New RS Threshold amount for the subsequent card authorization transaction
 @param targ New RS Target percentage setting for the subsequent card authorization transaction
 @param percent New RS Max Percent setting for the subsequent card authorization transaction
 
 * @retval Result Code:
 - 00: Successful
 - 01: Unsuccessful
 */
-(int) setROSParams:(uint)floorLimit threshold:(uint)thresh target:(uint)targ targetPercent:(uint)percent;

/**
 * Set EMV Tag Information
 *
 * @see setEMVTag:value:()
 */
-(int) C19:(NSString *)tag value:(NSData *)tagValue;

/**
 * Set EMV Tag Information
 *
This command is used to set tag information from the inserted card. The request can set one tag.
 
 XPI reference: C19
 
 @param tag 4 character alphanumeric EMV tag in hexadecimal format
 @param tagValue Value of the EMV tag data to be set for the inserted card
 
 * @retval Result Code:
 - 00: Successful
 - 01: Unsuccessful
 */
-(int) setEMVTag:(NSString *)tag value:(NSData *)tagValue;

/**
 * Get EMV Tag Information
 *
 * @see getEMVTag:()
 */
-(int) C20:(NSString *)tag;

/**
 * Get EMV Tag Information
 *
 This command is used to set tag information from the inserted card. The request can get one tag. The result can be retrieved in #emvTagData
 
 XPI reference: C20
 
 @param tag 4 character alphanumeric EMV tag in hexadecimal format
 
 * @retval Result Code:
 - 00: Successful. Read #emvTagData for tag data
 - 01: Unsuccessful
 */
-(int) getEMVTag:(NSString *)tag;

/**
 * Update EMV Tag Information
 *
 * @see setEMVTags:()
 */
-(int) C21:(NSMutableDictionary*)tagArray;

/**
 * Update EMV Tag Information
 *
 This command is used to set tag information from the inserted card. The request can set multiple tags.
 
 XPI reference: C21
 
 @param tagArray A dictionary containing NSData EMV tags that will be set on the inserted card
 
 * @retval Result Code:
 - 00: Successful
 - 01: Unsuccessful
 
 \par Converting TVL to NSMutableDictionary
 
 EMV data is usually received in TLV (Tag, Length, value) format:
 `950500000080009B02E8009F2701018A025A339F26080C552B9364D55CE5`
 
 This data contains the following EMV tags/values:
 
 Tag | Length | Value
 ----- | ----- | -----
 95 | 05 | 0000008000
 9B | 02 | E800
 9F27 | 01 | 01
 8A | 02 | 5A33
 9F26 | 08 | 0C552B9364D55CE5
 
 An example how to create an NSMutableDictionary with these values follows.
 
 @code



-(void) setTagsAndSend{
    
    NSMutableDictionary *emvTags = [[NSMutableDictionary alloc] initWithCapacity:0];
    
    [emvTags setObject:@"0000008000" forKey:@"95"];
    [emvTags setObject:@"E800" forKey:@"9B"];
    [emvTags setObject:@"01" forKey:@"9F27"];
    [emvTags setObject:@"5A33" forKey:@"8A"];
    [emvTags setObject:@"0C552B9364D55CE5" forKey:@"9F26"];
    [emvTags setObject:@"01" forKey:@"C2"];
    
    [self setEMVTags:emvTags];
	
}
 @endcode 
 */
-(int) setEMVTags:(NSMutableDictionary*)tagArray;

/**
 * Write to Script File
 *
 * @see writeToScriptFile:clear:numScripts:length:data:()
 */
-(int) C25:(int)scriptId clear:(BOOL)flag numScripts:(int)num length:(int)scriptLen data:(NSData *)scriptData;

/**
 * Write to Script File
 *
 This command allows the creation of EMVS71.DAT and EMVS72.DAT files adding the scripts received from the host to the inserted card. Currently, only one script can be sent at a time.
 
 XPI reference: C25
 
 @param scriptId  Numeric ‘71’ or ‘72’ value to be set based on the script sent from the host.
 @param flag Indicator to note whether or not to clear the script file before writing; a value of YES will clear before writing
 @param num The number of scripts included in the request
 @param scriptLen Length of the script data
 @param scriptData Hexadecimal script data of length scriptLen sent from the host for writing to the inserted card.

 
 * @retval Result Code:
 - 00: Successful
 - 01: Unsuccessful
 */
-(int) writeToScriptFile:(int)scriptId clear:(BOOL)flag numScripts:(int)num length:(int)scriptLen data:(NSData *)scriptData;


/**
 * Enable EMV Entry
 *
 * @see getCardData:language:amount:otherAmount:isRefundCTLS:disableCTLS:()
 */
-(int) C30:(int)timeout language:(int)lcode amount:(float)txnAmt otherAmount:(float)txnOthAmt isRefundCTLS:(BOOL)isRefund disableCTLS:(BOOL)disableCTLS;

/**
 * Get Card Data
 *
 Prompts the user for card swipe, tap or insert on the PINPad screen and awaits for a designated timeout period for the card data to be read based on the entry method used.
 
 If result code returns 0-Successful, then the card data can be read from #vfiCardData
 
 Note: When inserting a dual interface card (one that supports both contact and contactless), it is possible for the contactless reader to pick up the contactless signal while the card is read by the contact reader. In the case that both a contact and contactless card read occurs, the contact read will have priority. The contactless read will not be processed.
 
 XPI reference: C30
 
 @param timeout  A timeout value representing the amount of time, in seconds that the customer has to swipe tap, or insert their card.
  @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param txnAmt Amount for the transaction; this value is required to enable EMV contactless transactions.
 @param txnOthAmt Any additional amount information for the transaction; this value is only used if EMV Contactless is supported.
 @param isRefund For CTLS, if transaction type is a REFUND, set to TRUE.  Otherwise, FALSE = SALE.
 @param disableCTLS Disabled CTLS reader.

 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 42: Candidate List Empty
 - 88: No encryption module is activated
 */
-(int) getCardData:(int)timeout language:(int)lcode amount:(float)txnAmt otherAmount:(float)txnOthAmt isRefundCTLS:(BOOL)isRefund disableCTLS:(BOOL)disableCTLS;

/**
 * Prompt Message Changes
 *
 This command is used to reset the messages that are displayed during the C30 command back to defaults
  
 XPI reference: D30

 
 * @retval Result Code:
 - 00: Successful
 - 02: Invalid Data Format
 - 04: Error Opening File
 - 05: Error Reading File
 - 06: Error Writing to File
 - 07: Error Closing File
 - 08: Error in Table Record (Future Use) 
 - 09: Table Filename Duplication (Future Use)
 */
-(int) setC30DefaultPrompts;

/**
 * Prompt Message Changes
 *
 * @see setC30CustomPrompts:line2:line3:line4:line4amt1:amt2:amt3:amt4:amt4:()
 */
-(int) D30:(NSString*)line1 line2:(NSString*)line2 line3:(NSString*)line3 line4:(NSString*)line4 amt1:(BOOL)amt1 amt2:(BOOL)amt2 amt3:(BOOL)amt3 amt4:(BOOL)amt4;

/**
 * Prompt Message Changes
 *
 This command is used to change the messages that are displayed during the C30 command.  You can change the message, or leave the message on any line(s) blank and instead have it display the entered amount by setting the amount flag to TRUE
 
 
 @param line1 Message to display on line 1, up to 16 characters.
 @param line2 Message to display on line 2, up to 16 characters.
 @param line3 Message to display on line 3, up to 16 characters.
 @param line4 Message to display on line 4, up to 16 characters.
 @param amt1 Set to TRUE to display the amount on line 1.
 @param amt2 Set to TRUE to display the amount on line 2.
 @param amt3 Set to TRUE to display the amount on line 3.
 @param amt4 Set to TRUE to display the amount on line 4.

 
 XPI reference: D30
 
 
 * @retval Result Code:
 - 00: Successful
 - 02: Invalid Data Format
 - 04: Error Opening File
 - 05: Error Reading File
 - 06: Error Writing to File
 - 07: Error Closing File
 - 08: Error in Table Record (Future Use)
 - 09: Table Filename Duplication (Future Use)
 */
-(int) setC30CustomPrompts:(NSString*)line1 line2:(NSString*)line2 line3:(NSString*)line3 line4:(NSString*)line4 amt1:(BOOL)amt1 amt2:(BOOL)amt2 amt3:(BOOL)amt3 amt4:(BOOL)amt4;

/**
 * Enable EMV Entry
 *
 * @see getCardData:language:amount:otherAmount:()
 */
-(int) C30:(int)timeout language:(int)lcode amount:(float)txnAmt otherAmount:(float)txnOthAmt;

/**
 * Write to Script File
 *
 Prompts the user for card swipe, tap or insert on the PINPad screen and awaits for a designated timeout period for the card data to be read based on the entry method used.
 
 If result code returns 0-Successful, then the card data can be read from #vfiCardData
  Note: When inserting a dual interface card (one that supports both contact and contactless), it is possible for the contactless reader to pick up the contactless signal while the card is read by the contact reader. In the case that both a contact and contactless card read occurs, the contact read will have priority. The contactless read will not be processed.
 
 XPI reference: C30
 
 @param timeout  A timeout value representing the amount of time, in seconds that the customer has to swipe tap, or insert their card.
 @param lcode Numeric value denoting the language code for determining the displayed language of the pre-defined prompt; NOTE: Any non-zero value will default to French.
 @param txnAmt Amount for the transaction; this value is required to enable EMV contactless transactions.
 @param txnOthAmt Any additional amount information for the transaction; this value is only used if EMV Contactless is supported.

 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 42: Candidate List Empty
 - 88: No encryption module is activated
 */
-(int) getCardData:(int)timeout language:(int)lcode amount:(float)txnAmt otherAmount:(float)txnOthAmt;

/**
 * PIN Management EMV Transaction Request
 *
 * @see pinManagementCardAuthorization:otherAmount:merchantDecision:minRequestObjects:()
 */
-(int) C52:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray;

/**
 * EMV Transaction Request
 *
 Authorizes the EMV transaction amounts using the inserted chip (EMV) card. This request should follow the response to a request to getCardData:language:amount:otherAmount:() if the response indicates the card was inserted.
 
 If result code returns 0-Successful, then the card data can be read from #vfiEMVAuthorization
 
 XPI reference: C52
 
 @param amount Transaction amount value
 @param amtOther Other transaction amount value
 @param decision The merchant decision notes additional handling for the EMV request based on required processor handling. Values are:
 - 0: Request a TC
 - 1: Force online
 – 2: Force decline (AAC)
 @param reqObjArray A dictionary containing EMV tags of type NSData that is required at this transaction stage to be retrieved from the inserted card. See setEMVTags:() for an example of creating a dictionary of EMV tags.
 
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 */
-(int) pinManagementCardAuthorization:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray;



/**
 * EMV Transaction Request
 *
 * @see cardAuthorization:otherAmount:merchantDecision:minRequestObjects:()
 */
-(int) C32:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray;

/**
 * EMV Transaction Request
 *
 Authorizes the EMV transaction amounts using the inserted chip (EMV) card. This request should follow the response to a request to getCardData:language:amount:otherAmount:() if the response indicates the card was inserted.
 
 If result code returns 0-Successful, then the card data can be read from #vfiEMVAuthorization
 
 XPI reference: C32
 
 @param amount Transaction amount value
 @param amtOther Other transaction amount value
 @param decision The merchant decision notes additional handling for the EMV request based on required processor handling. Values are:
 - 0: Request a TC
 - 1: Force online
 – 2: Force decline (AAC)
 @param reqObjArray A dictionary containing EMV tags of type NSData that is required at this transaction stage to be retrieved from the inserted card. See setEMVTags:() for an example of creating a dictionary of EMV tags.

 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 */
-(int) cardAuthorization:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray;
/**
 * EMV Transaction Request
 *
 * @see cardAuthorization:otherAmount:merchantDecision:minRequestObjects:displayResult:()
 */
-(int) C32:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display;
/**
 * EMV Transaction Request
 *
 Authorizes the EMV transaction amounts using the inserted chip (EMV) card. This request should follow the response to a request to getCardData:language:amount:otherAmount:() if the response indicates the card was inserted.
 
 If result code returns 0-Successful, then the card data can be read from #vfiEMVAuthorization
 
 XPI reference: C32
 
 @param amount Transaction amount value
 @param amtOther Other transaction amount value
 @param decision The merchant decision notes additional handling for the EMV request based on required processor handling. Values are:
 - 0: Request a TC
 - 1: Force online
 – 2: Force decline (AAC)
 @param reqObjArray A dictionary containing EMV tags of type NSData that is required at this transaction stage to be retrieved from the inserted card. See setEMVTags:() for an example of creating a dictionary of EMV tags.
 @param display Display Card Decision
 - 0: Display decision
 - 1: Do not display decision
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 */
-(int) cardAuthorization:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display;
/**
 * EMV Transaction Request
 *
 * @see cardAuthorization:otherAmount:merchantDecision:minRequestObjects:displayResult:pinTryExceedStatus:displayAmount:()
 */
-(int) C32:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display pinTryExceedStatus:(BOOL)pinTry displayAmount:(BOOL)displayAmt;
/**
 * EMV Transaction Request
 *
 Authorizes the EMV transaction amounts using the inserted chip (EMV) card. This request should follow the response to a request to getCardData:language:amount:otherAmount:() if the response indicates the card was inserted.
 
 If result code returns 0-Successful, then the card data can be read from #vfiEMVAuthorization
 
 XPI reference: C32
 
 @param amount Transaction amount value
 @param amtOther Other transaction amount value
 @param decision The merchant decision notes additional handling for the EMV request based on required processor handling. Values are:
 - 0: Request a TC
 - 1: Force online
 – 2: Force decline (AAC)
 @param reqObjArray A dictionary containing EMV tags of type NSData that is required at this transaction stage to be retrieved from the inserted card. See setEMVTags:() for an example of creating a dictionary of EMV tags.
 @param display Display Card Decision
 - 0: Display decision
 - 1: Do not display decision
 @param pinTry Display PIN try exceeded. Pin Try Exceeds Limit prompt will be display in Offline Pin Entry for cases that the try limit has been exceeded.
 - 0: Display PIN try exceeded
 - 1: Do not display PIN try exceeded
 @param displayAmt Display amount. If enabled, the amount prompt will be shown during Offline Pin Entry.
 - 0: Display amount
 - 1: Do not display amount
 
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 */
-(int) cardAuthorization:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display pinTryExceedStatus:(BOOL)pinTry displayAmount:(BOOL)displayAmt;

/**
 * EMV Transaction Request
 *
 * @see cardAuthorization:otherAmount:merchantDecision:minRequestObjects:displayResult:pinTryExceedStatus:displayAmount:displayAppExpired:()
 */
-(int) C32:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display pinTryExceedStatus:(BOOL)pinTry displayAmount:(BOOL)displayAmt displayAppExpired:(BOOL)displayAppExpired;

/**
 * EMV Transaction Request
 *
 Authorizes the EMV transaction amounts using the inserted chip (EMV) card. This request should follow the response to a request to getCardData:language:amount:otherAmount:() if the response indicates the card was inserted.
 
 If result code returns 0-Successful, then the card data can be read from #vfiEMVAuthorization
 
 XPI reference: C32
 
 @param amount Transaction amount value
 @param amtOther Other transaction amount value
 @param decision The merchant decision notes additional handling for the EMV request based on required processor handling. Values are:
 - 0: Request a TC
 - 1: Force online
 – 2: Force decline (AAC)
  @param reqObjArray A dictionary containing EMV tags of type NSData that is required at this transaction stage to be retrieved from the inserted card. See setEMVTags:() for an example of creating a dictionary of EMV tags.
  @param display Display Card Decision
 - 0: Display decision
 - 1: Do not display decision
 @param pinTry Display PIN try exceeded. Pin Try Exceeds Limit prompt will be display in Offline Pin Entry for cases that the try limit has been exceeded.
 - 0: Display PIN try exceeded
 - 1: Do not display PIN try exceeded
 @param displayAmt Display amount. If enabled, the amount prompt will be shown during Offline Pin Entry.
 - 0: Display amount
 - 1: Do not display amount
 @param displayAppExpired Display App Expired
 - 0: Display app expired
 - 1: Do not display app expired

 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 */
-(int) cardAuthorization:(float)amount otherAmount:(float)amtOther merchantDecision:(int)decision minRequestObjects:(NSMutableArray *)reqObjArray displayResult:(BOOL)display pinTryExceedStatus:(BOOL)pinTry displayAmount:(BOOL)displayAmt displayAppExpired:(BOOL)displayAppExpired;
/**
 * Complete Online EMV Transaction
 *
 * @see completeOnlineEMV:displayResult:hostTags:()
 */
-(int) C34:(int)hostDecision displayResult:(BOOL)flag hostTags:(NSMutableDictionary*)hostTagData;

/**
 * Complete Online EMV Transaction
 *
 This command is required to complete an online EMV transaction.  EMV tags returned in #vfiEMVCompletionData emvTags variable
 
 XPI reference: C34
 
 @param hostDecision indicator from the host response; valid values are::
 - 0: Host Authorized
 - 1: Host Declined
 - 2: Failed to Connect
 @param flag Indicator to note whether or not to display the final response message; the valid values are:
 - 0: Do not display
 - 1: Display
 @param hostTagData NSMutableDictionary containing EMV tags. The dictionary has the `<NSString>` for keys representing EMV Tag name, and `<NSString>` for objects representing tag data.
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error
 - 23: Card removed
 - 24: Card Blocked
 - 25: Card not supported
 - 26: Card Swiped during Fallback mode
 - 42: Candidate List Empty
 - 91: Issuer authentication failed, or the card is in an error state (EMV Status Code=0x6985)
 
 \par Converting TVL to NSMutableDictionary
 
 EMV data is usually received in TLV (Tag, Length, value) format:
 `950500000080009B02E8009F2701018A025A339F26080C552B9364D55CE5`
 
 This data contains the following EMV tags/values:
 
 Tag | Length | Value
 ----- | ----- | -----
 95 | 05 | 0000008000
 9B | 02 | E800
 9F27 | 01 | 01
 8A | 02 | 5A33
 9F26 | 08 | 0C552B9364D55CE5
 
 An example how to create an NSMutableDictionary with these values follows.
 
 @code
 
 
 -(void) setTagsAndSend{
 
 NSMutableDictionary *emvTags = [[NSMutableDictionary alloc] initWithCapacity:0];
 
 [emvTags setObject:@"0000008000" forKey:@"95"];
 [emvTags setObject:@"E800" forKey:@"9B"];
 [emvTags setObject:@"01" forKey:@"9F27"];
 [emvTags setObject:@"5A33" forKey:@"8A"];
 [emvTags setObject:@"0C552B9364D55CE5" forKey:@"9F26"];
 [emvTags setObject:@"01" forKey:@"C2"];
 
 [self completeOnlineEMV:0 displayResult:0 hostTags:emvTags];
 
 }
 @endcode
 
 */
-(int) completeOnlineEMV:(int)hostDecision displayResult:(BOOL)flag hostTags:(NSMutableDictionary*)hostTagData;

/**
 * Complete Online EMV Transaction for PIN Management
 *
 * @see pinManagementCompleteOnlineEMV:displayResult:hostTags:()
 */
-(int) C54:(int)hostDecision displayResult:(BOOL)flag hostTags:(NSMutableDictionary*)hostTagData;

/**
 * Complete Online EMV Transaction for PIN Management
 *
This command is required to complete an online EMV transaction.  EMV tags returned in #vfiEMVCompletionData emvTags variable
 
 XPI reference: C54
 
 @param hostDecision indicator from the host response; valid values are::
 - 0: Host Authorized
 - 1: Host Declined
 - 2: Failed to Connect
 @param flag Indicator to note whether or not to display the final response message; the valid values are:
 - 0: Do not display
 - 1: Display
 @param hostTagData NSMutableDictionary containing EMV tags. The dictionary has the `<NSString>` for keys representing EMV Tag name, and `<NSString>` for objects representing tag data.
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
  - 22: Chip Error
  - 23: Card removed
  - 24: Card Blocked
  - 25: Card not supported
  - 26: Card Swiped during Fallback mode
  - 42: Candidate List Empty
 
 \par Converting TVL to NSMutableDictionary
 
 EMV data is usually received in TLV (Tag, Length, value) format:
 `950500000080009B02E8009F2701018A025A339F26080C552B9364D55CE5`
 
 This data contains the following EMV tags/values:
 
 Tag | Length | Value
  ----- | ----- | ----- 
 95 | 05 | 0000008000
 9B | 02 | E800
 9F27 | 01 | 01
 8A | 02 | 5A33
 9F26 | 08 | 0C552B9364D55CE5
 
 An example how to create an NSMutableDictionary with these values follows.  
 
 @code


-(void) setTagsAndSend{
    
    NSMutableDictionary *emvTags = [[NSMutableDictionary alloc] initWithCapacity:0];
    
    [emvTags setObject:@"0000008000" forKey:@"95"];
    [emvTags setObject:@"E800" forKey:@"9B"];
    [emvTags setObject:@"01" forKey:@"9F27"];
    [emvTags setObject:@"5A33" forKey:@"8A"];
    [emvTags setObject:@"0C552B9364D55CE5" forKey:@"9F26"];
    [emvTags setObject:@"01" forKey:@"C2"];
    
    [self pinManagementCompleteOnlineEMV:0 displayResult:0 hostTags:emvTags];
	
}
 @endcode
 
 */
-(int) pinManagementCompleteOnlineEMV:(int)hostDecision displayResult:(BOOL)flag hostTags:(NSMutableDictionary*)hostTagData;
/**
 * EMV Transaction Request
 *
 * @see getEMVTags:()
 */
-(int) C36:(NSMutableArray *)tagArray;

/**
 * EMV Transaction Request
 *
This command is used to retrieve tag information from the inserted card. The request can retrieve one or more tags. It is recommended to request all tags in one request.
 
 This command can be used to get multiple EMV Tags from the inserted card. It is recommended to request all desired tags in one request. If result code returns 0-Successful, then the tags can be read from #vfiEMVTags
 
 XPI reference: C36
 
 @param tagArray An array containing EMV tags of type NSData to be retrieved from the inserted card.  
 
 * @retval Result Code:
 - 00: Success - Manual Entry. Data has been stored in #vfiCardData
 - 01: Invalid command code
 - 02: Invalid data format
 - 03: Response has more packs
 - 04: Previous step missing
 - 05: Invalid Configuration
 - 06: Timed out
 - 07: Timer error
 - 08: Operation Cancelled
 - 09: Communication Error
 - 10: Chip Reader Failure
 - 21: Success - Swiped Card. Data has been stored in #vfiCardData
 - 22: Chip Error

 */
-(int) getEMVTags:(NSMutableArray *)tagArray;




/**
 * Card Remove Request
 *
 * @see removeCard()
 */
-(int) I02;

/**
 * Card Remove Request
 *
Requests the cardholder to remove the card from the PINPad
 
 XPI reference: I02
 
 * @retval Result Code:
 - 00: Success - Card Removed
 - 01: Unsuccessful

 */
-(int) removeCard;

/**
 * Display a String
 *
 *\deprecated Use displayMessages:message1:message2:clearScreen:()
 */
-(void) Z2:(NSString *)string clearScreen:(BOOL)clear;

/**
 * Display a String
 *
 This command will display a message on the Pinpad. The Pinpad displays the message until the customer presses the 'CANCEL' key, or until it receives another packet that changes the message content or forces it back to the idle state.
 
 This command uses secure messages which must be defined within XPI’s available message list in order for this method to generate the message on the screen.
 
 @param string Secure message to display
 @param clear Clear Display
 
 - \subpage securemessagetable "Secure Message Table"
 
 XPI reference: Z2
 
 *\deprecated Use displayMessages:message1:message2:clearScreen:()
 */
-(void) displayMessage:(NSString *)string clearScreen:(BOOL)clear;


/**
 * Amount Entry
 *
 * @see amountEntry:message1:message2:()
 */
-(int) Z56:(int)amount message1:(NSString*)msg1 message2:(NSString*)msg2;

/**
 * Amount Entry
 *
 This command will display an amount, and will prompt for an amount. If there is a successful response code (00), then the informatted amounted entered can be found in #amountResponse property.
 
 @param amount Send whole number - two decimal places will be assumed (1295=12.95). This field is not required. The user can just display a message without an amount. Send 0 to not display amount.
 @param msg1 Text can be passed into XPI. The message will not need to be verified against the secure message file since the entry is an amount entry. This field is not required.
 @param msg2 Display the message for the amount prompt. This message is required.
 
 - \subpage securemessagetable "Secure Message Table"
 
 XPI reference: Z56
 
 * @retval Result Code:
 - 00: Successful. Unformatted amount entered is returned in property #amountResponse
 - 01: Invalid Parameter
 - 02: Timed out
 - 03: CANCEL key was pressed
 - 04: User Bypass (applicable for amount equals to zero)
 
 */
-(int) amountEntry:(int)amount message1:(NSString*)msg1 message2:(NSString*)msg2;


/**
 * Amount Introduction
 *
 * @see amountIntroduction:amountFormat:message1:message2:()
 */
-(int) Z58:(int)defaultValue amountFormat:(int)format message1:(NSString*)msg1 message2:(NSString*)msg2;

/**
 * Amount Introduction
 *
 This command is used to prompt XPI for the Amount Introduction. The prompt messages allowed to be used on this command are only those messages that are included in the list of Secure Messages.  If there is a successful response code (00), then the informatted amounted entered can be found in #amountResponse property.
 
 @param defaultValue Default Amount to be displayed (according to format)
 @param format 0 or 1. Using a default value example of 123456789:
  - Format 0 : 1,234,567.89
  - Format 1 : 1 234 567,89
  - Note: The currency symbol to use is defined by the XPICURR config setting
 @param msg1 First secure message to display
 @param msg2 Second secure message to display
 
 - \subpage securemessagetable "Secure Message Table"
 
 XPI reference: Z58
 
 * @retval Result Code:
 - 00: Successful. Unformatted amount entered is returned in property #amountResponse
 - 01: Invalid Parameter
 - 02: Timed out
 - 03: CANCEL key was pressed
 - 04: User Bypass (applicable for amount equals to zero)
 
 */
-(int) amountIntroduction:(int)defaultValue amountFormat:(int)format message1:(NSString*)msg1 message2:(NSString*)msg2;


/**
 * Display Messages
 *
 * @see displayMessages:message1:message2:clearScreen:()
 */
-(void) Z3:(int)numMessages message1:(NSString*)msg1 message2:(NSString*)msg2 clearScreen:(BOOL)clear;

/**
 * Display Messages
 *
 This command will display up to 2 messages on the Pinpad. The Pinpad displays the message until the customer presses the 'CANCEL' key, or until it receives another packet that changes the message content or forces it back to the idle state.
 
 This command uses secure messages which must be defined within XPI’s available message list in order for this method to generate the message on the screen.
 
 @param numMessages Number of messages to display. Valid values 0 - 2
 @param msg1 First secure message to display
 @param msg2 Second secure message to display
 @param clear NOT APPLICABLE: XPI does not support Clear Screen on e210/e255/e315.  Parameter ignored
 
 - \subpage securemessagetable "Secure Message Table"
 
 XPI reference: Z3

 */
-(void) displayMessages:(int)numMessages message1:(NSString*)msg1 message2:(NSString*)msg2 clearScreen:(BOOL)clear;

/**
 * Request String Input
 *
 * @see requestStringInput:timeout:maxLen:entryType:()
 */
-(int) Z50:(int)echoFlag timeout:(int)timeout maxLen:(int)length entryType:(int)type;

/**
 * Request String Input
 *
This command requests a string of key input from the PIN pad keyboard. It is sent after the Z2 displayMessage:clearScreen:() or Z3 displayMessages:message1:message2:clearScreen:() command initiating the PIN pad to display one or more messages requesting customer key entries.
 
After the string of keys (from ‘0’ to ‘9’) is entered, the PIN pad sends a string of ASCII key values corresponding to the key inputs to the copyStringResponse(). The PIN pad may echo the input on its display. If no key input is received within the timeout period, the PIN pad will return to its idle state.
 
  XPI reference: Z50.
 
 @param echoFlag Indicates whether to echo key input with an asterisk ‘*’, keyed input, or none at all
 - 0: Echo key input with ‘*’
 - 1: Echo key input
 - 2: Don’t echo key input
 @param timeout Sets the input timeout in seconds (0-255)
 @param length Maximum length of the input string allowed (1-49, 49 is the default)
 @param type Entry type. Valid values are:
 - 0= Alphanumeric (Default)
 - 1= Numeric
 
 * @retval Result Code:
 - 00: Success - Retrive value by calling copyStringResponse()
 - 01: No Response. Enter key was pressed without any other input
 - 02: Timeout 
  */

-(int) requestStringInput:(int)echoFlag timeout:(int)timeout maxLen:(int)length entryType:(int)type;

/**
 * Request String Input
 *
 * @see requestStringInput:timeout:maxLen:()
 */
-(int) Z50:(int)echoFlag timeout:(int)timeout maxLen:(int)length;
/**
 * Request String Input
 *
 This command requests a string of key input from the PIN pad keyboard. It is sent after the Z2 displayMessage:clearScreen:() or Z3 displayMessages:message1:message2:clearScreen:() command initiating the PIN pad to display one or more messages requesting customer key entries.
 
 After the string of keys (from ‘0’ to ‘9’) is entered, the PIN pad sends a string of ASCII key values corresponding to the key inputs to the copyStringResponse(). The PIN pad may echo the input on its display. If no key input is received within the timeout period, the PIN pad will return to its idle state.
 
 XPI reference: Z50.
 
 @param echoFlag Indicates whether to echo key input with an asterisk ‘*’, keyed input, or none at all
 - 0: Echo key input with ‘*’
 - 1: Echo key input
 - 2: Don’t echo key input
 @param timeout Sets the input timeout in seconds (0-255)
 @param length Maximum length of the input string allowed (1-49, 49 is the default)

 
 * @retval Result Code:
 - 01: Success - Retrive value by calling copyStringResponse()
 - 02: Timeout.
 - 03: NULL. Enter key was pressed without any other input
 */
-(int) requestStringInput:(int)echoFlag timeout:(int)timeout maxLen:(int)length;

/**
 * Display Message and Prompt for Input
 *
 * @see displayMessagePromptInput:echo:timeout:maxLen:entryType:()
 */
-(int) Z52:(NSString*)message echo:(int)echoFlag timeout:(int)timeout maxLen:(int)length entryType:(int)type;
/**
 * Display Message and Prompt for Input
 *
 This command displays a message and then requests a string of key input from the PIN pad keyboard. 
 
 After the string of keys (from ‘0’ to ‘9’) is entered, the PIN pad sends a string of ASCII key values corresponding to the key inputs to the copyStringResponse(). The PIN pad may echo the input on its display. If no key input is received within the timeout period, the PIN pad will return to its idle state.
 
 XPI reference: Z52.

 @param message Text message to be displayed.
 @param echoFlag Indicates whether to echo key input with an asterisk ‘*’, keyed input, or none at all
 - 0: Echo key input with ‘*’
 - 1: Echo key input
 - 2: Don’t echo key input
 @param timeout Sets the input timeout in seconds (0-255)
 @param length Maximum length of the input string allowed (1-49, 49 is the default)
 @param type Entry type. Valid values are:
 - 0= Alphanumeric (Default)
 - 1= Numeric
 
 * @retval Result Code:
 - 01: Success - Retrive value by calling copyStringResponse()
 - 02: Timeout.
 - 03: NULL. Enter key was pressed without any other input
 */
-(int) displayMessagePromptInput:(NSString*)message echo:(int)echoFlag timeout:(int)timeout maxLen:(int)length entryType:(int)type;

/**
 * Accept and Encrypt PIN
 *
 * @see acceptEncryptPIN:()
 */
-(int) Z60:(NSString *)accountNumber;

/**
 * Accept and Encrypt PIN
 *
This command is sent by the master device after initializing the PINPad to display one or two messages requesting a customer PIN number using Z2 displayMessage:clearScreen:() or Z3 displayMessages:message1:message2:clearScreen:(). Upon receipt of this packet and the customer PIN number, the PINPad will form a formatted clear-text PIN block based on the customer account number and PIN number. The PINPad encrypts this formatted clear-text PIN block to come up with the cipher-text PIN block returned.
 
 The resulting data from the execution of this command can be retrieved from #vfiEncryptionData, specifically, the serialNumber and pinBlock member variables
 
 XPI reference: Z60.
 
 @param accountNumber The account number used with the entered PIN to create the encrypted PIN Block  (8 to 19 numeric digits)
 
 * @retval Result Code:
 - 00: Completed. Check for valid data (if any) in #vfiEncryptionData
 */
-(int) acceptEncryptPIN:(NSString *)accountNumber;

/**
 * Accept and Encrypt PIN, Display Custom Messages
 *
 * @see acceptEncryptPINMessage:minPIN:maxPIN:requirePIN:firstMessage:secondMessage:processingMessage:()
 */

-(int) Z62:(NSString *)accountNumber minPIN:(int)min maxPIN:(int)max requirePIN:(BOOL)req firstMessage:(NSString*)msg1 secondMessage:(NSString*)msg2 processingMessage:(NSString*)procMsg ;

/**
 * Accept and Encrypt PIN, Display Custom Messages
 *
This command is sent by the calling application to accept a PIN number from a customer, build a PIN block, encrypt it, and return to the calling application. Upon receipt of this packet and the customer PIN number, the PINPad will form a formatted clear-text PIN block based on the customer account number and PIN number. The PINPad encrypts this formatted clear-text PIN block to come up with the cipher-text PIN block returned. This command also allows the calling application to specify the length of the PIN number and whether or not a NULL PIN entry is allowed. It displays up to 2 messages, alternating with each other, before PIN entry and a processing message displayed after PIN entry.
 
 The resulting data from the execution of this command can be retrieved from #vfiEncryptionData, specifically, the serialNumber and pinBlock member variables
 
 XPI reference: Z62.
 
 @param accountNumber The account number used with the entered PIN to create the encrypted PIN Block  (8 to 19 numeric digits)
 @param min PIN Length
 @param max PIN Length
 @param req empty/no PIN
 @param msg1 Message 1 to be displayed on the PINPad (alternates with Message 2)
 @param msg2 Message 2 to be displayed on the PINPad (alternates with Message 1)
 @param procMsg Processing message to be displayed after PIN entry

 
 * @retval Result Code:
 - 00: Completed. Check for valid data (if any) in #vfiEncryptionData
 */
-(int) acceptEncryptPINMessage:(NSString *)accountNumber minPIN:(int)min maxPIN:(int)max requirePIN:(BOOL)req firstMessage:(NSString*)msg1 secondMessage:(NSString*)msg2 processingMessage:(NSString*)procMsg ;


/**
 * Request PIN Re-entry
 * This command re-prompts the ‘Enter PIN’ prompt. PAN will be sent to PIN pad and PIN block will be generated and sent in response.
 XPI Reference: S67
 *
 * @see requestPINRentry:()
    
    @retval Result Code:
    - 00: Successful, check for data (if any) in #vfiEncryptionData
    - 01: Unsucessful
    - 02: Timed Out
    - 03: CANCEL key was pressed
    - 04: CORR key was pressed
    - 06: Invalid Account # Length
 */
-(int) S67:(NSString *)accountNumber;

/**
 * Request PIN Re-entry
 * This command re-prompts the ‘Enter PIN’ prompt. PAN will be sent to PIN pad and PIN block will be generated and sent in response.
 XPI Reference: S67
 *
 * @see requestPINRentry:()
 
 @retval Result Code:
 - 00: Successful, check for data (if any) in #vfiEncryptionData
 - 01: Unsucessful
 - 02: Timed Out
 - 03: CANCEL key was pressed
 - 04: CORR key was pressed
 - 06: Invalid Account # Length
 */
-(int) requestPINRentry:(NSString *)accountNumber;

/**
 * Request PIN Re-entry
 * This command re-prompts the ‘Enter PIN’ prompt. PAN will be sent to PIN pad and PIN block will be generated and sent in response.
 XPI Reference: S67
 *
 * @see requestPINRentry:()
 *
 * @param accountNumber The account number of the card
 * @param prompt value to indicate the prompt to be displayed
 *   - 0: Enter PIN
 *   - 1: Re-Enter PIN
 *   - 2: Enter Current PIN
 *   - 3: Enter Assigned / PIN
 * @param timeout Number of seconds (001 - 255) timer should wait for a PIN entry prompt
 *
 * @retval Result Code:
 * - 00: Successful, check for data (if any) in #vfiEncryptionData
 * - 01: Unsucessful
 * - 02: Timed Out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 06: Invalid Account # Length
 */
-(int) S67:(NSString *)accountNumber pinpadPrompt:(int)prompt timeout:(int)timeout;

/**
 * Request PIN Re-entry
 * This command re-prompts the ‘Enter PIN’ prompt. PAN will be sent to PIN pad and PIN block will be generated and sent in response.
 XPI Reference: S67
 *
 * @see requestPINRentry:()
 *
 * @param accountNumber The account number of the card
 * @param prompt value to indicate the prompt to be displayed
 *   - 0: Enter PIN
 *   - 1: Re-Enter PIN
 *   - 2: Enter Current PIN
 *   - 3: Enter Assigned / PIN
 * @param timeout Number of seconds (001 - 255) timer should wait for a PIN entry prompt
 *
 * @retval Result Code:
 * - 00: Successful, check for data (if any) in #vfiEncryptionData
 * - 01: Unsucessful
 * - 02: Timed Out
 * - 03: CANCEL key was pressed
 * - 04: CORR key was pressed
 * - 06: Invalid Account # Length
 */
-(int) requestPINRentry:(NSString *)accountNumber pinpadPrompt:(int)prompt timeout:(int)timeout;

-(void) startServer; //!< Start the TCP server to listen for connections
-(void) stopServer;  //!< Stops the TCP server from listening for connections. Terminates any current connection.


-(NSString*)getOSVersion;  //!< M01 returns OS version
-(NSString*)getXPIVersion;  //!< M01 returns XPI Version

-(void) noResponseNextCommand;

/**
 * INTERNAL USE ONLY: Allows access for VFIBTBridge calls.
 *
 * Do not call this method directly.  This is exposed for VFIBTBridge to pass data to when communicating with e255
 *
 *
 */
-(void)processReceivedData:(NSData*)data;
/**
 * INTERNAL USE ONLY: Allows access for VFIBTBridge calls.
 *
 * Do not call this method directly.  This is exposed for VFIBTBridge to pass data to when communicating with e255
 *
 *
 */
+ (VFIPinpad *)sharedController;


/**
 * INTERNAL USE ONLY: Allows access for VFIBTBridge calls.
 *
 * Do not call this method directly.  This is exposed for VFIBTBridge to pass data to when communicating with e255
 *
 *
 */
-(void) ignoreDisconnect;


/**
 * INTERNAL USE ONLY: Allows access for VFIBTBridge calls.
 *
 * Do not call this method directly.  This is exposed for VFIBTBridge to pass data to when communicating with e255
 *
 *
 */
-(void) cancelPendingCommandNoData;

/**
 * INTERNAL USE ONLY: Allows access for VFIBTBridge calls.
 *
 * Do not call this method directly.  This is exposed for VFIBTBridge to pass data to when communicating with e255
 *
 *
 */
-(void) writeToSock:(NSData*)data;

+(BOOL) isGen3Server;


@property (retain) id <VFIPinpadDelegate> delegate; //!< Gets or Sets delegate for protocols
@property (nonatomic, retain) VFICardData	*vfiCardData; //!< Holds card data results from executing obtainCardData:(), obtainTrack2Data:optionalAmount:(), or getCardData:language:amount:otherAmount:()
@property (nonatomic, retain) VFIDataEntry	*vfiDataEntry; //!< Holds prompt results from executing S21prompt:(), dataEntryRequest:language:tip:cashback:surcharge:(), combinedPromptCommand:language:transID:menuArray:surcharge:accountNum:tipOptions:cashBackOptions:surchargeOptions:()
@property (nonatomic, retain) VFICipheredData	*vfiCipheredData;  //!< Holds cyphered results from executing retrieveEParmsData(), performTGKUpdateRequest(), getPKICipheredData(), getCipheredData()
@property (nonatomic, retain) VFIEMVTags	*vfiEMVTags; //!< Holds prompt results from executing getEMVTags:() 
@property (nonatomic, retain) VFIDiagnostics	*vfiDiagnostics;        //!< Holds result from executing diagnosticInfo()
@property (nonatomic, retain) VFIEMVAuthorization	*vfiEMVAuthorization; //!< Holds result from executing cardAuthorization:otherAmount:merchantDecision:minRequestObjects:()
@property (nonatomic, retain) VFIEMVCompletionData	*vfiEMVCompletionData; //!< Holds result from executing completeOnlineEMV:displayResult:hostTags:()
@property (nonatomic, retain) VFIEncryptionData	*vfiEncryptionData; //!< Holds result from executing testPINPad(), createMac:(), doInteracRequest:language:amount:pan:mac:(), validateMacResponse:language:pinKey:macKey:msgLine1:msgLine2:macData:(), acceptEncryptPIN:(), acceptEncryptPINMessage:minPIN:maxPIN:requirePIN:firstMessage:secondMessage:processingMessage:()


@property (nonatomic, readonly) NSString *pinpadName;//!< Gets or Sets delegate for protocols
@property (nonatomic, readonly) NSString *pinpadManufacturer;//!< Read Only name reported to External Accessory
@property (nonatomic, readonly) NSString *pinpadModelNumber;//!< Read Only Manufacturer reported to External Accessory
@property (nonatomic, readonly) NSString *pinpadSerialNumber;//!< Read Only Serial Number reported to External Accessory
@property (nonatomic, readonly) NSString *pinpadFirmwareRevision;//!< Read Only Firmware Version reported to External Accessory
@property (nonatomic, readonly) NSString *pinpadHardwareRevision;//!< Read Only Hardware Version reported to External Accessory
@property (nonatomic, readonly) NSArray *emaFiles;//!< Array of VFIEMAFiles containing the response from executing requestEMAFiles()
@property (readonly) int ackTimeout;//!< Read Only Timeout Value waiting for pinPad to return an `<ACK>` from an executed command. Set with setResponseTimeout:()
@property (readonly) int frameworkTimeout;//!< Read Only Timeout Value waiting for pinPad to return a reply from an executed command. Set with setFrameworkTimeout:()
@property (readonly) int ioTimer;//!< Read Only Timeout Value XPI awaiting input/output. Set with setIOTimer:()
@property (readonly) int PINTimeout;//!< Read Only Timeout Value waiting for PIN entry during EMV transaction. Set with setPINTimeout:()
@property (readonly) int vsdKeyIndex;//!< Read Only Index of DUKPT key when VSD encryption is enabled. Set after calling setPINTimeout:()
@property (readonly) int accountEntryTimeout;//!< Read Only Timeout Value waiting for account entry during EMV transaction. Set with accountEntryTimeout:()
@property (readonly) int continueTransactionTimeout; //!< Read Only Timeout Value waiting to complete online EMV transaction. Set with continueTransactionTimeout:()
@property (readonly) int amountResponse; //!< Read Only value returned with successful response code to amountIntroduction:format:message1:message2:timeout:()
@property (nonatomic, readonly) NSData* emvTagData; //!< Read Only value returned with successful response code to amountIntroduction:format:message1:message2:timeout:()
@property (readonly) BOOL pinpadConnected;//!< Read Only Boolean pinpad connection status
@property (readonly) BOOL connected;//!< Read Only Boolean pinpad connection status
@property (nonatomic, readonly) EAAccessory *eaACC;                 //!< Read Only Connected Accessory
@property (readonly) BOOL serverRunning;//!< Read Only Boolean TCP server status
@property (readonly) BOOL BTconnected;//!< Read Only Boolean pinpad e210/e255/e315 Bluetooth connection Status
@property (readonly) BOOL initialized; //!< Read Only Boolean pinpad initialized
@property (nonatomic, retain) AsyncSocket *  listenSocket; //!< PRIVATE: Used by VMF to manage TCP Server Mode
@property (nonatomic, retain) AsyncSocket *  currentSocket; //!< PRIVATE: Used by VMF to manage TCP Server Mode
@property (nonatomic, retain) NSMutableArray *connectedSockets; //!< PRIVATE: Used by VMF to manage TCP Server Mode
@property BOOL isRunning; //!< PRIVATE: Used by VMF to manage TCP Server Mode
@property BOOL remoteMode; //!< PRIVATE: Used by VMF to manage VMF Remote Mode
@property BOOL isVMFRemote; //!< PRIVATE: Used by VMF to manage VMF Remote Mode
@property (readonly) BOOL isGen3;                                   //!< Read Only Boolean Gen3 Connected


/**
 * Error code returned from unsuccessful Key Loading.
 *
 * Return Values:
 * - 00000000: Successful PKI update.
 * - 00001000: Parameter Error. NULL or out of Range.
 * - 00001001: Invalid Public Key File.
 * - 00001002: Encryption Failed.
 * - 00001003: Too small output buffer.
 * - 00001004: Invalid Key ID File.
 * - 00001005: Error in opening DataFile.
 * - 00001006: Error in Hash Key computation.
 * - 00001100: Unknown or unexpected error.
 *
 */
@property (nonatomic, readonly) NSString *keyLoadErrorCode;





@end


